[see also Feature request #14992 on the bug tracker]

The current binary lingen program sucks in just about every respect.

Parallelism
Memory consumption
Middle products
Pclmulqdq
Transform caching, and tuning
Linear system solving

************************************************************************
* Fact 3: inner arithmetic sucks.

Middle products appear in the course of the computation. They are done
the dumb way in lingen, full product + truncation. None of the back-ends
used for polynomial multiplication provide a middle product interface. It
is not critical, but there is both time and memory footprint to be saved
by doing it better.

Pclmulqdq is of course critical to having fast binary polynomial
multiplication. Alas, barbecue does not support it.

For choosing the transforms to be used, three options are theoretically
supported.
- Cantor (c128) the base field being GF(2^128). The innermost operation
  therefore cares a great deal about pclmulqdq. This is used for degrees
  larger or equal to cantor_threshold.
- ternary fft (gf2x-tfft).
- "fake" which defines DFT and IFT as copies, and uses gf2x_mul in the
  middle.

(The lack of activation for the gf2x-tfft layer really looks like a bug also.)

There is a bench_polmatmul program (here, the arguments needed are:
bench_polmatmul 132000000 512 256). It examines what it takes to do the
polynomial matrix multiplies, which are half of the above-leaves work
(the other half being MPs), while the work at the leaves of the recursion
is small linear algebra. Running this program shows that we would gain a
lot by enabling cantor, and enacting reasonable parallelism.

At the leaves of the recursion, we have small (512x768) binary linear
system solving (PLUQ-like). Currently, this seems to represent too much
time. I am confident that improvement is possible here as well.

Update: on a c125, 94% of the total time spent in the leaves (go_quadratic)
is spent in extract_coeff_degree_t(), and only 6% in gauss().


There's much to do here.

We identify two operations we have to perform.

 - products of matrices of size (m+n)*(m+n), with polynomial entries. We
   may assume at least that 32 divides m and n, maybe even 64.
   The polynomials in there have degree within the range 10^3 to 10^7,
   hardly ever more.
 - middle products matrices with polynomial entries, this time with size
   m*(m+n) and (m+n)*(m+n). The middle product is not balanced.

The strategy, first, is to:

(assuming we go for matrices of polynomials, because nowadays we have
pclmulqdq)

 WP 1.
   1a - write complete specifications and a test suite for the file
        lingen-matpoly.c (which deals with matrices having polynomial
        entries over GF(p) !).
        [ done ]
   1b - convert this test suite to what we expect for base field GF(2).
        [ done ]
   1c - write a new file, e.g. lingen-matpoly-binary.c, and in particular the
        functions matpoly_addmp and matpoly_addmul ; those are critical.
        [ done ]
   1d - First functionality test: enabling this from plingen so that we
        get a validation. This might imply disabling the bigmatpoly
        layer.
   Preparing 1d can conceivably be independent from the rest.

 WP 2.
   2a - specifications and tests for lingen-matpoly-ft.c
        [ done ]
   2b - updated test suite
        [ done ]
   2c - lingen-matpoly-ft-binary.c ; we might focus on c128 to start with.
        [ done ]
   2d - validation check.
        [ done ]

   Again, preparing 2d can conceivably be independent from the rest.

 WP 3.
   3a-3d - same for lingen-bigmatpoly.c and lingen-bigmatpoly-ft.c

