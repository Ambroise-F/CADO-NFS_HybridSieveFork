#ifndef BYTECODE_MISHMASH_B1_DATA_H
#define BYTECODE_MISHMASH_B1_DATA_H

/* This file was generated automatically */

#include "bytecode.h"

struct mishmash_B1_data_s
{
  unsigned int B1;
  unsigned int len; /* length of the bytecode */
  bytecode_const bc;
};

typedef struct mishmash_B1_data_s mishmash_B1_data_t;

/* B1=1 computed with 0 blocks, cost=0M */
static const uint8_t _B1_1_bc[] = {
    0x00,
    0xff
  }; /* end of bytecode for B1=1 */

/* B1=105 computed with 10 blocks, cost=1144M */
static const uint8_t _B1_105_bc[] = {
    0x03,
    /* 97*43*37*31*13*7*5  /  double-base chain  /  237 M (=12DBL+12TPL+1ADD+1M) */
    0x11, 0xf1, 0x0c, 0x0c,
    /* 73*71*61*17*5  /  double-base chain  /  189 M (=12DBL+8TPL+1ADD+1M) */
    0x11, 0xf1, 0x08, 0x0c,
    /* 89*53*29*23  /  double-base chain  /  169 M (=20DBL+1TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x0b, 0x71, 0x09,
    /* 101*83*79*19  /  double base expansion  /  185 M (=22DBL+1TPL+2ADD+3M) */
    0x21, 0xa2, 0x01, 0xff, 0x12, 0x51, 0x11, 0x62, 0x05,
    /* 103*67*59*11  /  double base expansion  /  180 M (=11DBL+7TPL+2ADD+3M) */
    0x21, 0xa2, 0x05, 0x80, 0x02, 0xff, 0x10, 0x41, 0x07, 0x72, 0x04,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3*3*3*3  /  PRAC  /  44 M (=4DBL+0TPL+4ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66,
      /* 7  /  PRAC  /  22 M (=2DBL+0TPL+2ADD+0M) */
      0x69, 0x02, 0x66,
      /* 47  /  PRAC  /  46 M (=2DBL+0TPL+6ADD+0M) */
      0x69, 0x02, 0x0b, 0x0b, 0x0b, 0x03, 0x66,
      /* 41  /  PRAC  /  46 M (=2DBL+0TPL+6ADD+0M) */
      0x69, 0x02, 0x03, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2  /  PRAC  /  30 M (=6DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=105 */

/* B1=115 computed with 8 blocks, cost=1297M */
static const uint8_t _B1_115_bc[] = {
    0x03,
    /* 109*73*37*19*13*7*5*3*3*3  /  double-base chain  /  261 M (=36DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x24,
    /* 113*107*97*89*67*61*47*43*17*7  /  double-base chain  /  442 M (=47DBL+6TPL+5ADD+1M) */
    0x11, 0xc1, 0x01, 0x0f, 0x41, 0x05, 0xd1, 0x01, 0x03, 0xc1, 0x02, 0x05, 0xf1, 0x02, 0x13,
    /* 101*83*71*41*11*3  /  double-base chain  /  233 M (=28DBL+1TPL+3ADD+1M) */
    0x11, 0x51, 0x10, 0xc1, 0x01, 0x01, 0x61, 0x0b,
    /* 79*59*29  /  double-base chain  /  136 M (=17DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x05, 0x61, 0x0c,
    /* 103*31*23  /  double-base chain  /  132 M (=13DBL+2TPL+2ADD+1M) */
    0x11, 0x51, 0x08, 0xf1, 0x02, 0x05,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5  /  PRAC  /  17 M (=1DBL+0TPL+2ADD+0M) */
      0x69, 0x03, 0x66,
      /* 53  /  PRAC  /  50 M (=4DBL+0TPL+5ADD+0M) */
      0x69, 0x02, 0x02, 0x0b, 0x02, 0x46,
      /* 2*2*2*2*2*2  /  PRAC  /  30 M (=6DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=115 */

/* B1=125 computed with 9 blocks, cost=1339M */
static const uint8_t _B1_125_bc[] = {
    0x03,
    /* 109*73*37*19*13*7*5*3*3*3  /  double-base chain  /  261 M (=36DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x24,
    /* 41*31*11*5*5*3  /  double-base chain  /  149 M (=20DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x14,
    /* 113*107*97*89*67*61*47*43*17*7  /  double-base chain  /  442 M (=47DBL+6TPL+5ADD+1M) */
    0x11, 0xc1, 0x01, 0x0f, 0x41, 0x05, 0xd1, 0x01, 0x03, 0xc1, 0x02, 0x05, 0xf1, 0x02, 0x13,
    /* 53*29  /  double-base chain  /  84 M (=9DBL+1TPL+1ADD+1M) */
    0x11, 0xe1, 0x01, 0x09,
    /* 101*83*79  /  double-base chain  /  156 M (=13DBL+4TPL+2ADD+1M) */
    0x11, 0x51, 0x09, 0xe1, 0x04, 0x04,
    /* 71*59*11  /  double-base chain  /  125 M (=12DBL+2TPL+2ADD+1M) */
    0x11, 0x41, 0x02, 0xf1, 0x02, 0x0a,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 103  /  PRAC  /  57 M (=3DBL+0TPL+7ADD+0M) */
      0x69, 0x02, 0x0b, 0x02, 0x0b, 0x0b, 0x03, 0x66,
      /* 23  /  PRAC  /  39 M (=3DBL+0TPL+4ADD+0M) */
      0x69, 0x02, 0x02, 0x03, 0x46,
      /* 2*2*2*2*2*2  /  PRAC  /  30 M (=6DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=125 */

/* B1=137 computed with 9 blocks, cost=1499M */
static const uint8_t _B1_137_bc[] = {
    0x03,
    /* 109*73*37*19*13*7*5*3*3*3  /  double-base chain  /  261 M (=36DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x24,
    /* 127*113*43*29*5*3  /  double-base chain  /  205 M (=28DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1c,
    /* 137*101*59*53*17*7*5  /  double-base chain  /  268 M (=33DBL+1TPL+3ADD+1M) */
    0x11, 0x51, 0x0a, 0x51, 0x13, 0xe1, 0x01, 0x04,
    /* 131*103*83*79  /  double-base chain  /  205 M (=20DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0xe1, 0x03, 0x11,
    /* 97*89*61*41*11  /  double-base chain  /  222 M (=23DBL+3TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0xc1, 0x01, 0x01, 0xf1, 0x01, 0x13,
    /* 107*71*47*31*23  /  double base expansion  /  227 M (=20DBL+5TPL+3ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x02, 0xff, 0x10, 0x52, 0x07, 0x41, 0x05, 0x62, 0x08,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 11  /  PRAC  /  28 M (=2DBL+0TPL+3ADD+0M) */
      0x69, 0x02, 0x03, 0x66,
      /* 67  /  PRAC  /  52 M (=2DBL+0TPL+7ADD+0M) */
      0x69, 0x02, 0x03, 0x0b, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2  /  PRAC  /  35 M (=7DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=137 */

/* B1=148 computed with 11 blocks, cost=1557M */
static const uint8_t _B1_148_bc[] = {
    0x03,
    /* 109*73*37*19*13*7*5*3*3*3  /  double-base chain  /  261 M (=36DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x24,
    /* 127*113*43*29*5*3  /  double-base chain  /  205 M (=28DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1c,
    /* 131*103*83*79  /  double-base chain  /  205 M (=20DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0xe1, 0x03, 0x11,
    /* 139*53*41*31  /  double-base chain  /  181 M (=20DBL+2TPL+2ADD+1M) */
    0x11, 0x51, 0x07, 0xe1, 0x02, 0x0d,
    /* 137*107*97*71*61*17  /  double-base chain  /  298 M (=35DBL+1TPL+5ADD+1M) */
    0x11, 0x41, 0x06, 0xc1, 0x01, 0x08, 0x51, 0x0d, 0x51, 0x04, 0x61, 0x04,
    /* 101*89*59*47*23  /  double base expansion  /  229 M (=18DBL+7TPL+2ADD+3M) */
    0x21, 0xa2, 0x02, 0x80, 0x05, 0xff, 0x10, 0x41, 0x09, 0x72, 0x09,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5  /  PRAC  /  17 M (=1DBL+0TPL+2ADD+0M) */
      0x69, 0x03, 0x66,
      /* 7  /  PRAC  /  22 M (=2DBL+0TPL+2ADD+0M) */
      0x69, 0x02, 0x66,
      /* 11*11  /  PRAC  /  56 M (=4DBL+0TPL+6ADD+0M) */
      0x69, 0x02, 0x03, 0x66, 0x69, 0x02, 0x03, 0x66,
      /* 67  /  PRAC  /  52 M (=2DBL+0TPL+7ADD+0M) */
      0x69, 0x02, 0x03, 0x0b, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2  /  PRAC  /  35 M (=7DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=148 */

/* B1=161 computed with 12 blocks, cost=1723M */
static const uint8_t _B1_161_bc[] = {
    0x03,
    /* 127*113*43*29*5*3  /  double-base chain  /  205 M (=28DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1c,
    /* 109*37*13*5  /  double-base chain  /  135 M (=18DBL+0TPL+1ADD+1M) */
    0x11, 0x61, 0x12,
    /* 139*67*19*5  /  double-base chain  /  150 M (=15DBL+3TPL+1ADD+1M) */
    0x11, 0xf1, 0x03, 0x0f,
    /* 151*31*7  /  double-base chain  /  114 M (=15DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x0f,
    /* 149*131*83*73*61  /  double-base chain  /  249 M (=28DBL+3TPL+2ADD+1M) */
    0x11, 0xd1, 0x03, 0x03, 0x61, 0x19,
    /* 157*103*89*59  /  double-base chain  /  205 M (=20DBL+4TPL+2ADD+1M) */
    0x11, 0x51, 0x0c, 0xe1, 0x04, 0x08,
    /* 101*79*71*23*11*3*3  /  double-base chain  /  237 M (=16DBL+9TPL+2ADD+1M) */
    0x11, 0xd1, 0x09, 0x04, 0x61, 0x0c,
    /* 137*107*53*41*7  /  double-base chain  /  222 M (=23DBL+3TPL+3ADD+1M) */
    0x11, 0x51, 0x06, 0xc1, 0x02, 0x04, 0xe1, 0x01, 0x0d,
    /* 97  /  double-base chain  /  56 M (=5DBL+1TPL+1ADD+1M) */
    0x11, 0xe1, 0x01, 0x05,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3  /  PRAC  /  11 M (=1DBL+0TPL+1ADD+0M) */
      0x69, 0x66,
      /* 47*17*11  /  PRAC  /  108 M (=6DBL+0TPL+13ADD+0M) */
      0x69, 0x03, 0x0b, 0x02, 0x66, 0x69, 0x02, 0x0b, 0x0b, 0x0b, 0x03, 0x66, 0x69, 0x02, 0x03, 0x46,
      /* 2*2*2*2*2*2*2  /  PRAC  /  35 M (=7DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=161 */

/* B1=173 computed with 11 blocks, cost=1917M */
static const uint8_t _B1_173_bc[] = {
    0x03,
    /* 163*127*113*107*79*43*29*23*5*3*3*3  /  double-base chain  /  417 M (=56DBL+0TPL+3ADD+1M) */
    0x11, 0x41, 0x04, 0x51, 0x1c, 0x71, 0x18,
    /* 109*37*13*5  /  double-base chain  /  135 M (=18DBL+0TPL+1ADD+1M) */
    0x11, 0x61, 0x12,
    /* 149*131*83*73*61  /  double-base chain  /  249 M (=28DBL+3TPL+2ADD+1M) */
    0x11, 0xd1, 0x03, 0x03, 0x61, 0x19,
    /* 167*157*139*41  /  double-base chain  /  209 M (=24DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x05, 0xe1, 0x01, 0x13,
    /* 137*101*59*53*17*7*5  /  double-base chain  /  268 M (=33DBL+1TPL+3ADD+1M) */
    0x11, 0x51, 0x0a, 0x51, 0x13, 0xe1, 0x01, 0x04,
    /* 173*151*97*67*19*13*7  /  double-base chain  /  299 M (=27DBL+7TPL+3ADD+2M) */
    0x11, 0xc1, 0x02, 0x0d, 0x81, 0x05, 0x61, 0x0e,
    /* 89*71*47*31  /  double-base chain  /  185 M (=12DBL+7TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x02, 0xf1, 0x05, 0x0a,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3  /  PRAC  /  11 M (=1DBL+0TPL+1ADD+0M) */
      0x69, 0x66,
      /* 11*11  /  PRAC  /  56 M (=4DBL+0TPL+6ADD+0M) */
      0x69, 0x02, 0x03, 0x66, 0x69, 0x02, 0x03, 0x66,
      /* 103  /  PRAC  /  57 M (=3DBL+0TPL+7ADD+0M) */
      0x69, 0x02, 0x0b, 0x02, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2  /  PRAC  /  35 M (=7DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=173 */

/* B1=187 computed with 11 blocks, cost=2030M */
static const uint8_t _B1_187_bc[] = {
    0x03,
    /* 127*113*43*29*5*3  /  double-base chain  /  205 M (=28DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1c,
    /* 109*37*13*5  /  double-base chain  /  135 M (=18DBL+0TPL+1ADD+1M) */
    0x11, 0x61, 0x12,
    /* 139*67*19*5  /  double-base chain  /  150 M (=15DBL+3TPL+1ADD+1M) */
    0x11, 0xf1, 0x03, 0x0f,
    /* 151*31*7  /  double-base chain  /  114 M (=15DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x0f,
    /* 149*131*83*73*61  /  double-base chain  /  249 M (=28DBL+3TPL+2ADD+1M) */
    0x11, 0xd1, 0x03, 0x03, 0x61, 0x19,
    /* 181*163*157*137*79*59*47*41  /  double-base chain  /  403 M (=46DBL+4TPL+4ADD+1M) */
    0x11, 0xd1, 0x01, 0x0d, 0x41, 0x08, 0xd1, 0x01, 0x07, 0xe1, 0x02, 0x12,
    /* 179*173*53*23  /  double-base chain  /  195 M (=22DBL+2TPL+2ADD+1M) */
    0x11, 0x41, 0x14, 0xe1, 0x02, 0x02,
    /* 101*97*71*17*13*11*11  /  double-base chain  /  270 M (=23DBL+7TPL+3ADD+1M) */
    0x11, 0xc1, 0x02, 0x03, 0xc1, 0x03, 0x0c, 0xf1, 0x02, 0x08,
    /* 167*107*103*89*7*3  /  double base expansion  /  256 M (=19DBL+8TPL+3ADD+3M) */
    0x21, 0xa2, 0x05, 0x80, 0x03, 0xff, 0x10, 0x51, 0x06, 0x42, 0x05, 0x71, 0x08,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3*3  /  PRAC  /  22 M (=2DBL+0TPL+2ADD+0M) */
      0x69, 0x66, 0x69, 0x46,
      /* 2*2*2*2*2*2*2  /  PRAC  /  35 M (=7DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=187 */

/* B1=200 computed with 14 blocks, cost=2262M */
static const uint8_t _B1_200_bc[] = {
    0x03,
    /* 127*113*43*29*5*3  /  double-base chain  /  205 M (=28DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1c,
    /* 193*191*101*73*5  /  double-base chain  /  225 M (=24DBL+4TPL+1ADD+1M) */
    0x11, 0xf1, 0x04, 0x18,
    /* 181*61*47*37*13*7*7  /  double-base chain  /  249 M (=24DBL+6TPL+1ADD+1M) */
    0x11, 0xf1, 0x06, 0x18,
    /* 179*139*137*107*97*59  /  double-base chain  /  316 M (=33DBL+5TPL+3ADD+1M) */
    0x11, 0x51, 0x15, 0xd1, 0x02, 0x04, 0xe1, 0x03, 0x08,
    /* 199*67*53*23  /  double-base chain  /  185 M (=24DBL+0TPL+2ADD+1M) */
    0x11, 0x51, 0x05, 0x71, 0x13,
    /* 131*103*83*79  /  double-base chain  /  205 M (=20DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0xe1, 0x03, 0x11,
    /* 151*71*31  /  double-base chain  /  149 M (=12DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x06, 0xf1, 0x02, 0x06,
    /* 173*167*149*109*19*13  /  double base expansion  /  289 M (=32DBL+3TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x01, 0x80, 0x01, 0xff, 0x10, 0x51, 0x06, 0x43, 0x0f, 0x72, 0x0b,
    /* 197*163*157*41*17*11  /  double base expansion  /  277 M (=32DBL+2TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x01, 0xff, 0x13, 0x51, 0x0b, 0x42, 0x09, 0x63, 0x0c,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3*3*3  /  PRAC  /  33 M (=3DBL+0TPL+3ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66,
      /* 5  /  PRAC  /  17 M (=1DBL+0TPL+2ADD+0M) */
      0x69, 0x03, 0x66,
      /* 11  /  PRAC  /  28 M (=2DBL+0TPL+3ADD+0M) */
      0x69, 0x02, 0x03, 0x66,
      /* 89  /  PRAC  /  53 M (=1DBL+0TPL+8ADD+0M) */
      0x69, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2  /  PRAC  /  35 M (=7DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=200 */

/* B1=214 computed with 13 blocks, cost=2318M */
static const uint8_t _B1_214_bc[] = {
    0x03,
    /* 127*113*43*29*5*3  /  double-base chain  /  205 M (=28DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1c,
    /* 193*191*101*73*5  /  double-base chain  /  225 M (=24DBL+4TPL+1ADD+1M) */
    0x11, 0xf1, 0x04, 0x18,
    /* 181*61*47*37*13*7*7  /  double-base chain  /  249 M (=24DBL+6TPL+1ADD+1M) */
    0x11, 0xf1, 0x06, 0x18,
    /* 211*107*19*11  /  double-base chain  /  166 M (=19DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x13,
    /* 167*157*139*41  /  double-base chain  /  209 M (=24DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x05, 0xe1, 0x01, 0x13,
    /* 179*173*53*23  /  double-base chain  /  195 M (=22DBL+2TPL+2ADD+1M) */
    0x11, 0x41, 0x14, 0xe1, 0x02, 0x02,
    /* 131*103*83*79  /  double-base chain  /  205 M (=20DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0xe1, 0x03, 0x11,
    /* 137*97*89*59*13  /  double-base chain  /  236 M (=25DBL+3TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x08, 0x51, 0x09, 0xf1, 0x02, 0x08,
    /* 197*151*149*71*67*11  /  double-base chain  /  300 M (=33DBL+3TPL+4ADD+1M) */
    0x11, 0x41, 0x12, 0xc1, 0x01, 0x0a, 0x41, 0x02, 0xe1, 0x02, 0x03,
    /* 199*163*109*31*17  /  double-base chain  /  247 M (=18DBL+8TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x02, 0xc1, 0x06, 0x03, 0xf1, 0x01, 0x0d,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3*3*3  /  PRAC  /  33 M (=3DBL+0TPL+3ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66,
      /* 5  /  PRAC  /  17 M (=1DBL+0TPL+2ADD+0M) */
      0x69, 0x03, 0x46,
      /* 2*2*2*2*2*2*2  /  PRAC  /  35 M (=7DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=214 */

/* B1=229 computed with 15 blocks, cost=2497M */
static const uint8_t _B1_229_bc[] = {
    0x03,
    /* 127*113*43*29*5*3  /  double-base chain  /  205 M (=28DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1c,
    /* 193*191*101*73*5  /  double-base chain  /  225 M (=24DBL+4TPL+1ADD+1M) */
    0x11, 0xf1, 0x04, 0x18,
    /* 181*61*47*37*13*7*7  /  double-base chain  /  249 M (=24DBL+6TPL+1ADD+1M) */
    0x11, 0xf1, 0x06, 0x18,
    /* 211*107*19*11  /  double-base chain  /  166 M (=19DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x13,
    /* 223*157*137*131*103*17*3*3  /  double-base chain  /  329 M (=40DBL+2TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x09, 0xc1, 0x01, 0x0b, 0x71, 0x14,
    /* 151*139*109*11  /  double-base chain  /  190 M (=23DBL+1TPL+2ADD+1M) */
    0x11, 0x51, 0x15, 0xf1, 0x01, 0x02,
    /* 179*173*53*23  /  double-base chain  /  195 M (=22DBL+2TPL+2ADD+1M) */
    0x11, 0x41, 0x14, 0xe1, 0x02, 0x02,
    /* 229*199*163*149*83*59*41*13  /  double-base chain  /  399 M (=26DBL+16TPL+3ADD+1M) */
    0x11, 0xd1, 0x05, 0x0d, 0xd1, 0x0a, 0x02, 0xe1, 0x01, 0x0b,
    /* 227*197*79  /  double-base chain  /  172 M (=17DBL+3TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x06, 0xe1, 0x01, 0x0b,
    /* 167*71*67*5  /  double-base chain  /  175 M (=14DBL+5TPL+2ADD+1M) */
    0x11, 0xd1, 0x03, 0x04, 0xf1, 0x02, 0x0a,
    /* 97  /  double-base chain  /  56 M (=5DBL+1TPL+1ADD+1M) */
    0x11, 0xe1, 0x01, 0x05,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3  /  PRAC  /  11 M (=1DBL+0TPL+1ADD+0M) */
      0x69, 0x66,
      /* 89  /  PRAC  /  53 M (=1DBL+0TPL+8ADD+0M) */
      0x69, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x66,
      /* 31  /  PRAC  /  41 M (=1DBL+0TPL+6ADD+0M) */
      0x69, 0x03, 0x0b, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2  /  PRAC  /  35 M (=7DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=229 */

/* B1=244 computed with 15 blocks, cost=2682M */
static const uint8_t _B1_244_bc[] = {
    0x03,
    /* 227*73*67*17  /  double-base chain  /  180 M (=21DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x15,
    /* 179*101*97*47*29*23*5  /  double-base chain  /  283 M (=38DBL+0TPL+2ADD+1M) */
    0x11, 0x51, 0x23, 0x71, 0x03,
    /* 211*107*19*11  /  double-base chain  /  166 M (=19DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x13,
    /* 223*137*103*83*37  /  double-base chain  /  251 M (=30DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x13, 0x71, 0x0b,
    /* 233*191*173*157  /  double-base chain  /  230 M (=27DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x09, 0xf1, 0x01, 0x12,
    /* 127*43*3  /  double-base chain  /  107 M (=14DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x0e,
    /* 241*59*7*5  /  double-base chain  /  146 M (=11DBL+5TPL+1ADD+1M) */
    0x11, 0xe1, 0x05, 0x0b,
    /* 193*151*149*11  /  double-base chain  /  201 M (=16DBL+6TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x09, 0xe1, 0x04, 0x07,
    /* 139*131*41  /  double-base chain  /  159 M (=10DBL+6TPL+2ADD+1M) */
    0x11, 0xc1, 0x04, 0x07, 0xe1, 0x02, 0x03,
    /* 239*199*197*163*113*79*71*53  /  double base expansion  /  421 M (=46DBL+6TPL+3ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x03, 0xff, 0x10, 0x41, 0x04, 0x41, 0x1c, 0x62, 0x0e,
    /* 229*181*167*109*89*61*31*13*7  /  double base expansion  /  417 M (=28DBL+16TPL+3ADD+5M) */
    0x21, 0xa2, 0x05, 0xa3, 0x01, 0x80, 0x0a, 0xff, 0x10, 0x41, 0x0c, 0x53, 0x0d, 0x62, 0x03,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3*3*3*3  /  PRAC  /  44 M (=4DBL+0TPL+4ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66,
      /* 5  /  PRAC  /  17 M (=1DBL+0TPL+2ADD+0M) */
      0x69, 0x03, 0x66,
      /* 13  /  PRAC  /  29 M (=1DBL+0TPL+4ADD+0M) */
      0x69, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2  /  PRAC  /  35 M (=7DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=244 */

/* B1=260 computed with 16 blocks, cost=2813M */
static const uint8_t _B1_260_bc[] = {
    0x03,
    /* 227*73*67*17  /  double-base chain  /  180 M (=21DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x15,
    /* 179*101*97*47*29*23*5  /  double-base chain  /  283 M (=38DBL+0TPL+2ADD+1M) */
    0x11, 0x51, 0x23, 0x71, 0x03,
    /* 223*137*103*83*37  /  double-base chain  /  251 M (=30DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x13, 0x71, 0x0b,
    /* 151*31*7  /  double-base chain  /  114 M (=15DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x0f,
    /* 233*191*173*157  /  double-base chain  /  230 M (=27DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x09, 0xf1, 0x01, 0x12,
    /* 193*127*109*107*61*13*7  /  double-base chain  /  309 M (=12DBL+18TPL+1ADD+1M) */
    0x11, 0xf1, 0x12, 0x0c,
    /* 211*139*13*11  /  double-base chain  /  171 M (=22DBL+0TPL+2ADD+1M) */
    0x11, 0x51, 0x0e, 0x71, 0x08,
    /* 167*149*5  /  double-base chain  /  132 M (=9DBL+5TPL+1ADD+1M) */
    0x11, 0xf1, 0x05, 0x09,
    /* 241*229*19  /  double-base chain  /  157 M (=20DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x10, 0x71, 0x04,
    /* 181*131*89*59*11  /  double-base chain  /  241 M (=24DBL+4TPL+3ADD+1M) */
    0x11, 0x41, 0x07, 0xd1, 0x04, 0x09, 0x71, 0x08,
    /* 251*43*41  /  double-base chain  /  151 M (=14DBL+3TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x0a, 0xe1, 0x02, 0x04,
    /* 257  /  double-base chain  /  65 M (=8DBL+0TPL+1ADD+1M) */
    0x11, 0x61, 0x08,
    /* 239*199*197*163*113*79*71*53  /  double base expansion  /  421 M (=46DBL+6TPL+3ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x03, 0xff, 0x10, 0x41, 0x04, 0x41, 0x1c, 0x62, 0x0e,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3*3*3*3*3  /  PRAC  /  55 M (=5DBL+0TPL+5ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66,
      /* 5  /  PRAC  /  17 M (=1DBL+0TPL+2ADD+0M) */
      0x69, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=260 */

/* B1=276 computed with 18 blocks, cost=3005M */
static const uint8_t _B1_276_bc[] = {
    0x03,
    /* 227*73*67*17  /  double-base chain  /  180 M (=21DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x15,
    /* 179*101*97*47*29*23*5  /  double-base chain  /  283 M (=38DBL+0TPL+2ADD+1M) */
    0x11, 0x51, 0x23, 0x71, 0x03,
    /* 211*107*19*11  /  double-base chain  /  166 M (=19DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x13,
    /* 223*137*103*83*37  /  double-base chain  /  251 M (=30DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x13, 0x71, 0x0b,
    /* 127*43*3  /  double-base chain  /  107 M (=14DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x0e,
    /* 167*157*149*139*89*59*41*13*5  /  double-base chain  /  405 M (=48DBL+3TPL+4ADD+1M) */
    0x11, 0xd1, 0x02, 0x0a, 0x51, 0x0d, 0xc1, 0x01, 0x04, 0x71, 0x15,
    /* 193*191  /  double-base chain  /  117 M (=12DBL+2TPL+1ADD+1M) */
    0x11, 0xf1, 0x02, 0x0c,
    /* 251*241*13  /  double-base chain  /  155 M (=18DBL+1TPL+2ADD+1M) */
    0x11, 0x51, 0x0e, 0xf1, 0x01, 0x04,
    /* 257  /  double-base chain  /  65 M (=8DBL+0TPL+1ADD+1M) */
    0x11, 0x61, 0x08,
    /* 239*199*197*163*113*79*71*53  /  double base expansion  /  421 M (=46DBL+6TPL+3ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x03, 0xff, 0x10, 0x41, 0x04, 0x41, 0x1c, 0x62, 0x0e,
    /* 271*229*173*151*109*7  /  double base expansion  /  310 M (=37DBL+2TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0x80, 0x01, 0xff, 0x10, 0x41, 0x16, 0x42, 0x05, 0x62, 0x0a,
    /* 269*263*181*61*11  /  double base expansion  /  261 M (=30DBL+2TPL+3ADD+3M) */
    0x21, 0xa2, 0x02, 0x10, 0x21, 0xff, 0x10, 0x42, 0x0c, 0x62, 0x12,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3*3*3*3  /  PRAC  /  44 M (=4DBL+0TPL+4ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66,
      /* 5  /  PRAC  /  17 M (=1DBL+0TPL+2ADD+0M) */
      0x69, 0x03, 0x66,
      /* 7  /  PRAC  /  22 M (=2DBL+0TPL+2ADD+0M) */
      0x69, 0x02, 0x66,
      /* 233  /  PRAC  /  65 M (=1DBL+0TPL+10ADD+0M) */
      0x69, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x66,
      /* 131*31  /  PRAC  /  100 M (=2DBL+0TPL+15ADD+0M) */
      0x69, 0x03, 0x0b, 0x0b, 0x0b, 0x03, 0x66, 0x69, 0x03, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=276 */

/* B1=293 computed with 18 blocks, cost=3284M */
static const uint8_t _B1_293_bc[] = {
    0x03,
    /* 179*101*97*47*29*23*5  /  double-base chain  /  283 M (=38DBL+0TPL+2ADD+1M) */
    0x11, 0x51, 0x23, 0x71, 0x03,
    /* 211*107*19*11  /  double-base chain  /  166 M (=19DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x13,
    /* 223*137*103*31*11*3  /  double-base chain  /  239 M (=30DBL+1TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x09, 0x71, 0x15,
    /* 281*181*109*67*13  /  double-base chain  /  244 M (=29DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x09, 0xf1, 0x01, 0x14,
    /* 149*131*83*73*61  /  double-base chain  /  249 M (=28DBL+3TPL+2ADD+1M) */
    0x11, 0xd1, 0x03, 0x03, 0x61, 0x19,
    /* 233*191*173*157  /  double-base chain  /  230 M (=27DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x09, 0xf1, 0x01, 0x12,
    /* 127*43*3  /  double-base chain  /  107 M (=14DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x0e,
    /* 283*277*229*227*3*3  /  double-base chain  /  270 M (=24DBL+7TPL+2ADD+2M) */
    0x11, 0x91, 0x07, 0x61, 0x18,
    /* 241*59*7*5  /  double-base chain  /  146 M (=11DBL+5TPL+1ADD+1M) */
    0x11, 0xe1, 0x05, 0x0b,
    /* 269*151*41*17  /  double-base chain  /  193 M (=20DBL+3TPL+2ADD+1M) */
    0x11, 0x51, 0x12, 0xf1, 0x03, 0x02,
    /* 271*17  /  double-base chain  /  96 M (=9DBL+2TPL+1ADD+1M) */
    0x11, 0xf1, 0x02, 0x09,
    /* 293*263*251*193*167*139*37  /  double-base chain  /  407 M (=42DBL+6TPL+5ADD+1M) */
    0x11, 0x41, 0x17, 0x51, 0x04, 0xc1, 0x03, 0x01, 0x41, 0x0a, 0xe1, 0x03, 0x04,
    /* 257  /  double-base chain  /  65 M (=8DBL+0TPL+1ADD+1M) */
    0x11, 0x61, 0x08,
    /* 239*199*197*163*113*79*71*53  /  double base expansion  /  421 M (=46DBL+6TPL+3ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x03, 0xff, 0x10, 0x41, 0x04, 0x41, 0x1c, 0x62, 0x0e,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 13*5*3  /  PRAC  /  57 M (=3DBL+0TPL+7ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x0b, 0x0b, 0x03, 0x66,
      /* 7  /  PRAC  /  22 M (=2DBL+0TPL+2ADD+0M) */
      0x69, 0x02, 0x66,
      /* 89  /  PRAC  /  53 M (=1DBL+0TPL+8ADD+0M) */
      0x69, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=293 */

/* B1=310 computed with 14 blocks, cost=3348M */
static const uint8_t _B1_310_bc[] = {
    0x03,
    /* 193*191*163*107*101*79*73*23*5*3*3  /  double-base chain  /  437 M (=52DBL+4TPL+3ADD+1M) */
    0x11, 0x41, 0x04, 0xc1, 0x04, 0x12, 0x71, 0x1e,
    /* 277*223*137*127*103*67*53*29  /  double-base chain  /  402 M (=47DBL+4TPL+3ADD+1M) */
    0x11, 0xc1, 0x02, 0x1e, 0xc1, 0x02, 0x09, 0x61, 0x08,
    /* 281*257*199*151*149*61*19*11*7  /  double-base chain  /  415 M (=42DBL+8TPL+3ADD+1M) */
    0x11, 0xc1, 0x04, 0x11, 0xd1, 0x04, 0x03, 0x71, 0x16,
    /* 293*251*239*211*197*131*113  /  double-base chain  /  406 M (=39DBL+9TPL+3ADD+1M) */
    0x11, 0xd1, 0x05, 0x03, 0xd1, 0x03, 0x22, 0xe1, 0x01, 0x02,
    /* 167*157*139*41  /  double-base chain  /  209 M (=24DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x05, 0xe1, 0x01, 0x13,
    /* 181*47*13  /  double-base chain  /  129 M (=12DBL+3TPL+1ADD+1M) */
    0x11, 0xf1, 0x03, 0x0c,
    /* 307*269*263*241*229*71*43*31*17  /  double-base chain  /  469 M (=56DBL+3TPL+5ADD+1M) */
    0x11, 0x51, 0x07, 0x51, 0x03, 0x41, 0x04, 0xd1, 0x03, 0x12, 0x71, 0x18,
    /* 233*227*179*109*5  /  double-base chain  /  251 M (=18DBL+9TPL+2ADD+1M) */
    0x11, 0xc1, 0x07, 0x0b, 0xe1, 0x02, 0x07,
    /* 271*17  /  double-base chain  /  96 M (=9DBL+2TPL+1ADD+1M) */
    0x11, 0xf1, 0x02, 0x09,
    /* 89*83*59*11*5  /  double-base chain  /  194 M (=15DBL+6TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x05, 0xf1, 0x04, 0x0a,
    /* 283*173*97*37*13  /  double-base chain  /  249 M (=20DBL+7TPL+3ADD+1M) */
    0x11, 0x51, 0x08, 0xc1, 0x05, 0x04, 0xf1, 0x02, 0x08,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3*3*3  /  PRAC  /  33 M (=3DBL+0TPL+3ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66,
      /* 7  /  PRAC  /  22 M (=2DBL+0TPL+2ADD+0M) */
      0x69, 0x02, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=310 */

/* B1=327 computed with 16 blocks, cost=3541M */
static const uint8_t _B1_327_bc[] = {
    0x03,
    /* 193*191*101*73*5  /  double-base chain  /  225 M (=24DBL+4TPL+1ADD+1M) */
    0x11, 0xf1, 0x04, 0x18,
    /* 277*223*137*127*103*67*53*29  /  double-base chain  /  402 M (=47DBL+4TPL+3ADD+1M) */
    0x11, 0xc1, 0x02, 0x1e, 0xc1, 0x02, 0x09, 0x61, 0x08,
    /* 317*307*173*151*41*31*7*7  /  double-base chain  /  357 M (=44DBL+2TPL+3ADD+1M) */
    0x11, 0xc1, 0x02, 0x1e, 0x51, 0x0c, 0x71, 0x02,
    /* 271*157*107*83*79*59  /  double-base chain  /  309 M (=28DBL+8TPL+2ADD+1M) */
    0x11, 0xd1, 0x06, 0x17, 0xf1, 0x02, 0x05,
    /* 293*251*239*211*197*131*113  /  double-base chain  /  406 M (=39DBL+9TPL+3ADD+1M) */
    0x11, 0xd1, 0x05, 0x03, 0xd1, 0x03, 0x22, 0xe1, 0x01, 0x02,
    /* 311*281*89*37*17*5  /  double-base chain  /  264 M (=25DBL+6TPL+2ADD+1M) */
    0x11, 0xd1, 0x05, 0x0f, 0xf1, 0x01, 0x0a,
    /* 181*47*13  /  double-base chain  /  129 M (=12DBL+3TPL+1ADD+1M) */
    0x11, 0xf1, 0x03, 0x0c,
    /* 263*163*139*97*43*17*11  /  double-base chain  /  326 M (=31DBL+7TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x05, 0x41, 0x09, 0xf1, 0x06, 0x11,
    /* 233*227*179*109*5  /  double-base chain  /  251 M (=18DBL+9TPL+2ADD+1M) */
    0x11, 0xc1, 0x07, 0x0b, 0xe1, 0x02, 0x07,
    /* 257*229*167*23*19  /  double-base chain  /  249 M (=32DBL+0TPL+3ADD+1M) */
    0x11, 0x41, 0x10, 0x41, 0x08, 0x71, 0x08,
    /* 313*269*241*199*149*71*61  /  double-base chain  /  405 M (=40DBL+7TPL+5ADD+1M) */
    0x11, 0xc1, 0x01, 0x02, 0x41, 0x08, 0xd1, 0x03, 0x0a, 0xc1, 0x03, 0x12, 0x61, 0x02,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3*3*3*3*3  /  PRAC  /  55 M (=5DBL+0TPL+5ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66,
      /* 13  /  PRAC  /  29 M (=1DBL+0TPL+4ADD+0M) */
      0x69, 0x0b, 0x0b, 0x03, 0x66,
      /* 11  /  PRAC  /  28 M (=2DBL+0TPL+3ADD+0M) */
      0x69, 0x02, 0x03, 0x66,
      /* 283  /  PRAC  /  70 M (=2DBL+0TPL+10ADD+0M) */
      0x69, 0x02, 0x03, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=327 */

/* B1=345 computed with 16 blocks, cost=3689M */
static const uint8_t _B1_345_bc[] = {
    0x03,
    /* 331*241*151*31*17*13*11*7*7*5*3*3*3*3  /  double-base chain  /  403 M (=54DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x18, 0x51, 0x06, 0x61, 0x18,
    /* 337*269*199*73*11  /  double-base chain  /  256 M (=29DBL+3TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x09, 0xe1, 0x02, 0x14,
    /* 281*181*109*67*13  /  double-base chain  /  244 M (=29DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x09, 0xf1, 0x01, 0x14,
    /* 271*157*107*83*79*59  /  double-base chain  /  309 M (=28DBL+8TPL+2ADD+1M) */
    0x11, 0xd1, 0x06, 0x17, 0xf1, 0x02, 0x05,
    /* 311*223*139*101*97*41*23  /  double-base chain  /  353 M (=40DBL+4TPL+3ADD+1M) */
    0x11, 0xc1, 0x03, 0x15, 0x41, 0x0a, 0xe1, 0x01, 0x09,
    /* 293*251*239*211*197*131*113  /  double-base chain  /  406 M (=39DBL+9TPL+3ADD+1M) */
    0x11, 0xd1, 0x05, 0x03, 0xd1, 0x03, 0x22, 0xe1, 0x01, 0x02,
    /* 193*191  /  double-base chain  /  117 M (=12DBL+2TPL+1ADD+1M) */
    0x11, 0xf1, 0x02, 0x0c,
    /* 167*149*5  /  double-base chain  /  132 M (=9DBL+5TPL+1ADD+1M) */
    0x11, 0xf1, 0x05, 0x09,
    /* 313*277*227*163*61  /  double-base chain  /  293 M (=28DBL+6TPL+3ADD+1M) */
    0x11, 0xd1, 0x05, 0x13, 0xd1, 0x01, 0x02, 0x61, 0x07,
    /* 257*233*229*173*29  /  double-base chain  /  290 M (=23DBL+8TPL+4ADD+1M) */
    0x11, 0x41, 0x02, 0x51, 0x10, 0xc1, 0x04, 0x03, 0xe1, 0x04, 0x02,
    /* 317*307*179*127*37*17  /  double base expansion  /  305 M (=34DBL+4TPL+2ADD+3M) */
    0x21, 0xa2, 0x02, 0x80, 0x02, 0xff, 0x10, 0x41, 0x0f, 0x72, 0x13,
    /* 283*263*137*103*53*47*43*19  /  double base expansion  /  390 M (=43DBL+5TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x02, 0x80, 0x02, 0xff, 0x10, 0x52, 0x0e, 0x43, 0x10, 0x61, 0x0d,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 7*3  /  PRAC  /  33 M (=3DBL+0TPL+3ADD+0M) */
      0x69, 0x02, 0x66, 0x69, 0x66,
      /* 89*5  /  PRAC  /  70 M (=2DBL+0TPL+10ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x66,
      /* 71  /  PRAC  /  52 M (=2DBL+0TPL+7ADD+0M) */
      0x69, 0x03, 0x0b, 0x02, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=345 */

/* B1=364 computed with 16 blocks, cost=3968M */
static const uint8_t _B1_364_bc[] = {
    0x03,
    /* 337*227*127*73*67*17*7*7  /  double-base chain  /  335 M (=42DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x12, 0x71, 0x18,
    /* 359*313*263*223*137*109*103*83*37*3  /  double-base chain  /  493 M (=60DBL+4TPL+3ADD+1M) */
    0x11, 0xd1, 0x02, 0x1d, 0xd1, 0x02, 0x09, 0x61, 0x16,
    /* 179*101*97*47*29*23*5  /  double-base chain  /  283 M (=38DBL+0TPL+2ADD+1M) */
    0x11, 0x51, 0x23, 0x71, 0x03,
    /* 307*167*71*59*5*3  /  double-base chain  /  239 M (=30DBL+1TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x0c, 0x71, 0x12,
    /* 293*251*239*211*197*131*113  /  double-base chain  /  406 M (=39DBL+9TPL+3ADD+1M) */
    0x11, 0xd1, 0x05, 0x03, 0xd1, 0x03, 0x22, 0xe1, 0x01, 0x02,
    /* 349*347*277*269*173*149*79*61*43*31  /  double-base chain  /  537 M (=64DBL+4TPL+5ADD+1M) */
    0x11, 0x41, 0x12, 0x41, 0x15, 0x51, 0x09, 0x51, 0x04, 0xe1, 0x04, 0x0c,
    /* 199*19*13  /  double-base chain  /  119 M (=14DBL+1TPL+1ADD+1M) */
    0x11, 0xe1, 0x01, 0x0e,
    /* 241*193*191*17  /  double-base chain  /  209 M (=24DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x09, 0x71, 0x0f,
    /* 353*283*151*5  /  double-base chain  /  202 M (=23DBL+2TPL+2ADD+1M) */
    0x11, 0x51, 0x0a, 0xe1, 0x02, 0x0d,
    /* 181*157*139*41*11*11*3  /  double-base chain  /  278 M (=31DBL+3TPL+3ADD+1M) */
    0x11, 0xc1, 0x02, 0x03, 0xd1, 0x01, 0x0c, 0x61, 0x10,
    /* 271*257*107*19*13*7  /  double-base chain  /  261 M (=32DBL+1TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x15, 0x41, 0x09, 0x61, 0x02,
    /* 317*281*229*89  /  double-base chain  /  243 M (=26DBL+3TPL+3ADD+1M) */
    0x11, 0x41, 0x09, 0xc1, 0x03, 0x0b, 0x61, 0x06,
    /* 331*311*53  /  double-base chain  /  177 M (=16DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x02, 0xe1, 0x02, 0x0e,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 233*3*3  /  PRAC  /  87 M (=3DBL+0TPL+12ADD+0M) */
      0x69, 0x66, 0x69, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x66, 0x69, 0x66,
      /* 163  /  PRAC  /  63 M (=3DBL+0TPL+8ADD+0M) */
      0x69, 0x02, 0x0b, 0x0b, 0x0b, 0x0b, 0x02, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=364 */

/* B1=383 computed with 16 blocks, cost=4243M */
static const uint8_t _B1_383_bc[] = {
    0x03,
    /* 331*151*109*73*37*31*19*13*11*7*7*5*3*3*3*3*3  /  double-base chain  /  487 M (=66DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x1e, 0x51, 0x06, 0x61, 0x1e,
    /* 347*277*251*149*67*13  /  double-base chain  /  313 M (=32DBL+6TPL+2ADD+1M) */
    0x11, 0x51, 0x1d, 0xf1, 0x06, 0x03,
    /* 337*317*271*223*179*137  /  double-base chain  /  357 M (=44DBL+2TPL+3ADD+1M) */
    0x11, 0x51, 0x0e, 0xc1, 0x01, 0x03, 0xf1, 0x01, 0x1b,
    /* 293*257*211*193*173*139*97*17  /  double-base chain  /  433 M (=52DBL+3TPL+4ADD+1M) */
    0x11, 0xd1, 0x02, 0x0f, 0xc1, 0x01, 0x09, 0x51, 0x16, 0x61, 0x06,
    /* 379*367*281*239*227*7  /  double-base chain  /  334 M (=39DBL+3TPL+3ADD+1M) */
    0x11, 0x51, 0x15, 0xc1, 0x01, 0x04, 0xf1, 0x02, 0x0e,
    /* 373*191*127*61*59*19  /  double-base chain  /  301 M (=36DBL+2TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x0a, 0x41, 0x03, 0xe1, 0x01, 0x17,
    /* 383*313*89*71*43*17*5  /  double-base chain  /  318 M (=35DBL+4TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x06, 0xc1, 0x01, 0x06, 0xf1, 0x02, 0x17,
    /* 311*283*199*101*41  /  double-base chain  /  278 M (=31DBL+3TPL+3ADD+1M) */
    0x11, 0x41, 0x02, 0xc1, 0x02, 0x05, 0xf1, 0x01, 0x18,
    /* 131*103*83*79  /  double-base chain  /  205 M (=20DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0xe1, 0x03, 0x11,
    /* 349*269*181*5  /  double-base chain  /  205 M (=20DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x0a, 0xe1, 0x03, 0x0a,
    /* 157*53*29*11  /  double-base chain  /  170 M (=15DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x03, 0x09, 0xf1, 0x01, 0x06,
    /* 241*229  /  double-base chain  /  130 M (=11DBL+3TPL+2ADD+1M) */
    0x11, 0x51, 0x09, 0xe1, 0x03, 0x02,
    /* 359*353*263*197*167*113*23  /  double base expansion  /  390 M (=45DBL+4TPL+3ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x01, 0xff, 0x10, 0x51, 0x08, 0x51, 0x18, 0x72, 0x0d,
    /* 307*163*107*47  /  double base expansion  /  221 M (=26DBL+1TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0xff, 0x12, 0x42, 0x02, 0x51, 0x0d, 0x72, 0x0b,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 233  /  PRAC  /  65 M (=1DBL+0TPL+10ADD+0M) */
      0x69, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=383 */

/* B1=403 computed with 15 blocks, cost=4436M */
static const uint8_t _B1_403_bc[] = {
    0x03,
    /* 337*241*227*127*73*67*17*17*13*7*7*7*5*3*3  /  double-base chain  /  511 M (=66DBL+2TPL+3ADD+1M) */
    0x11, 0x51, 0x15, 0xd1, 0x02, 0x03, 0x61, 0x2a,
    /* 359*313*263*211*109*107*19*11*3  /  double-base chain  /  416 M (=49DBL+4TPL+3ADD+1M) */
    0x11, 0xd1, 0x02, 0x1e, 0xd1, 0x02, 0x08, 0x71, 0x0b,
    /* 373*101*61*53*41*19*11  /  double-base chain  /  301 M (=32DBL+5TPL+2ADD+1M) */
    0x11, 0xd1, 0x04, 0x10, 0xe1, 0x01, 0x10,
    /* 383*277*223*193*167*97*59  /  double-base chain  /  393 M (=44DBL+5TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x04, 0xc1, 0x04, 0x0e, 0x61, 0x1a,
    /* 349*199*181*139*79*37*31  /  double-base chain  /  357 M (=44DBL+2TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x15, 0x41, 0x13, 0xe1, 0x01, 0x04,
    /* 233*191*173*157  /  double-base chain  /  230 M (=27DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x09, 0xf1, 0x01, 0x12,
    /* 397*317*283*271*229*137*5*5  /  double-base chain  /  405 M (=48DBL+3TPL+4ADD+1M) */
    0x11, 0x51, 0x08, 0xd1, 0x01, 0x08, 0xd1, 0x01, 0x16, 0xe1, 0x01, 0x0a,
    /* 307*281*269*239*197*3  /  double-base chain  /  329 M (=32DBL+6TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0x41, 0x03, 0xc1, 0x05, 0x06, 0x71, 0x14,
    /* 293*47*29  /  double-base chain  /  148 M (=17DBL+1TPL+2ADD+1M) */
    0x11, 0x41, 0x06, 0xf1, 0x01, 0x0b,
    /* 379*251*113*71  /  double-base chain  /  237 M (=20DBL+6TPL+3ADD+1M) */
    0x11, 0xd1, 0x04, 0x03, 0xd1, 0x01, 0x05, 0xf1, 0x01, 0x0c,
    /* 389*367*347*163*151*131*23  /  double base expansion  /  398 M (=39DBL+8TPL+3ADD+5M) */
    0x21, 0xa2, 0x05, 0xa3, 0x03, 0xff, 0x13, 0x42, 0x01, 0x43, 0x17, 0x61, 0x0f,
    /* 331*257*103*89*83*43*3  /  double base expansion  /  332 M (=35DBL+5TPL+3ADD+3M) */
    0x21, 0xa2, 0x05, 0xff, 0x12, 0x41, 0x13, 0x42, 0x05, 0x71, 0x0b,
    /* 401*353*311*179*149  /  double base expansion  /  314 M (=29DBL+7TPL+3ADD+3M) */
    0x21, 0xa2, 0x02, 0x80, 0x05, 0xff, 0x10, 0x42, 0x0e, 0x41, 0x08, 0x62, 0x07,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 13  /  PRAC  /  29 M (=1DBL+0TPL+4ADD+0M) */
      0x69, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=403 */

/* B1=423 computed with 16 blocks, cost=4649M */
static const uint8_t _B1_423_bc[] = {
    0x03,
    /* 331*151*109*73*37*31*19*13*11*7*7*5*3*3*3*3*3  /  double-base chain  /  487 M (=66DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x1e, 0x51, 0x06, 0x61, 0x1e,
    /* 421*367*257*197*103*101*89*17*5  /  double-base chain  /  445 M (=48DBL+7TPL+3ADD+1M) */
    0x11, 0x41, 0x0e, 0xd1, 0x04, 0x03, 0xe1, 0x03, 0x1f,
    /* 347*277*251*149*67*13  /  double-base chain  /  313 M (=32DBL+6TPL+2ADD+1M) */
    0x11, 0x51, 0x1d, 0xf1, 0x06, 0x03,
    /* 359*263*211*199*139*131*71*5  /  double-base chain  /  412 M (=45DBL+6TPL+3ADD+1M) */
    0x11, 0xd1, 0x02, 0x07, 0x41, 0x1d, 0xf1, 0x04, 0x09,
    /* 389*269*167*79*7  /  double-base chain  /  251 M (=30DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x11, 0xf1, 0x01, 0x0d,
    /* 337*317*271*223*179*137  /  double-base chain  /  357 M (=44DBL+2TPL+3ADD+1M) */
    0x11, 0x51, 0x0e, 0xc1, 0x01, 0x03, 0xf1, 0x01, 0x1b,
    /* 241*193*191*17  /  double-base chain  /  209 M (=24DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x09, 0x71, 0x0f,
    /* 401*397*353*181*163*127*107*61*43  /  double-base chain  /  508 M (=53DBL+8TPL+5ADD+1M) */
    0x11, 0xc1, 0x05, 0x0a, 0xd1, 0x01, 0x13, 0xd1, 0x01, 0x04, 0xc1, 0x01, 0x0a, 0x61, 0x0a,
    /* 379*239*97*29  /  double-base chain  /  217 M (=20DBL+5TPL+2ADD+1M) */
    0x11, 0xc1, 0x04, 0x0d, 0xe1, 0x01, 0x07,
    /* 409*383*41  /  double-base chain  /  176 M (=21DBL+1TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x04, 0x71, 0x11,
    /* 373*311*307*283*233  /  double-base chain  /  327 M (=30DBL+7TPL+4ADD+1M) */
    0x11, 0xc1, 0x04, 0x0c, 0xd1, 0x02, 0x04, 0x51, 0x0d, 0xe1, 0x01, 0x01,
    /* 349*313*293*173*113*19  /  double base expansion  /  343 M (=26DBL+11TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x04, 0x80, 0x06, 0xff, 0x10, 0x42, 0x02, 0x43, 0x0f, 0x71, 0x09,
    /* 229*227*157*59*53*23  /  double base expansion  /  309 M (=28DBL+7TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x04, 0x80, 0x02, 0xff, 0x10, 0x51, 0x03, 0x53, 0x07, 0x62, 0x12,
    /* 419*281*83*11  /  double base expansion  /  213 M (=14DBL+8TPL+2ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x05, 0xff, 0x10, 0x41, 0x06, 0x62, 0x08,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 47  /  PRAC  /  46 M (=2DBL+0TPL+6ADD+0M) */
      0x69, 0x02, 0x0b, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=423 */

/* B1=443 computed with 17 blocks, cost=4918M */
static const uint8_t _B1_443_bc[] = {
    0x03,
    /* 241*163*127*113*107*79*43*29*23*17*13*7*5*5*3*3*3*3*3  /  double-base chain  /  601 M (=80DBL+0TPL+5ADD+1M) */
    0x11, 0x41, 0x04, 0x51, 0x14, 0x51, 0x04, 0x51, 0x04, 0x61, 0x30,
    /* 419*353*271*103*73*17*11  /  double-base chain  /  344 M (=33DBL+8TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x12, 0xe1, 0x06, 0x0f,
    /* 373*101*61*53*41*19*11  /  double-base chain  /  301 M (=32DBL+5TPL+2ADD+1M) */
    0x11, 0xd1, 0x04, 0x10, 0xe1, 0x01, 0x10,
    /* 359*263*211*199*139*131*71*5  /  double-base chain  /  412 M (=45DBL+6TPL+3ADD+1M) */
    0x11, 0xd1, 0x02, 0x07, 0x41, 0x1d, 0xf1, 0x04, 0x09,
    /* 383*277*223*193*167*97*59  /  double-base chain  /  393 M (=44DBL+5TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x04, 0xc1, 0x04, 0x0e, 0x61, 0x1a,
    /* 433*349*313*83  /  double-base chain  /  242 M (=27DBL+3TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x02, 0xf1, 0x02, 0x19,
    /* 443*409*337*251*149*13  /  double-base chain  /  341 M (=40DBL+3TPL+3ADD+1M) */
    0x11, 0x51, 0x11, 0xc1, 0x03, 0x13, 0x61, 0x04,
    /* 233*191*173*157  /  double-base chain  /  230 M (=27DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x09, 0xf1, 0x01, 0x12,
    /* 379*367*281*239*227*7  /  double-base chain  /  334 M (=39DBL+3TPL+3ADD+1M) */
    0x11, 0x51, 0x15, 0xc1, 0x01, 0x04, 0xf1, 0x02, 0x0e,
    /* 283*109*47*37*19  /  double-base chain  /  231 M (=22DBL+5TPL+2ADD+1M) */
    0x11, 0xd1, 0x03, 0x12, 0xf1, 0x02, 0x04,
    /* 439*431*347*311*307*137*7  /  double-base chain  /  412 M (=41DBL+7TPL+5ADD+1M) */
    0x11, 0x41, 0x02, 0xc1, 0x02, 0x13, 0xc1, 0x01, 0x05, 0xd1, 0x03, 0x07, 0xe1, 0x01, 0x08,
    /* 421*397*317*197*181*179  /  double-base chain  /  387 M (=34DBL+9TPL+5ADD+1M) */
    0x11, 0xc1, 0x06, 0x05, 0xd1, 0x02, 0x05, 0x51, 0x0a, 0x41, 0x08, 0xf1, 0x01, 0x06,
    /* 257  /  double-base chain  /  65 M (=8DBL+0TPL+1ADD+1M) */
    0x11, 0x61, 0x08,
    /* 401*389*151*67*31  /  double base expansion  /  273 M (=26DBL+6TPL+2ADD+3M) */
    0x21, 0xa2, 0x05, 0x80, 0x01, 0xff, 0x10, 0x41, 0x18, 0x62, 0x02,
    /* 293*269*229*89  /  double base expansion  /  242 M (=29DBL+1TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0xff, 0x12, 0x51, 0x07, 0x52, 0x08, 0x72, 0x0e,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 331  /  PRAC  /  74 M (=4DBL+0TPL+9ADD+0M) */
      0x69, 0x02, 0x03, 0x0b, 0x02, 0x02, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=443 */

/* B1=464 computed with 22 blocks, cost=5191M */
static const uint8_t _B1_464_bc[] = {
    0x03,
    /* 337*227*127*73*67*17*7*7  /  double-base chain  /  335 M (=42DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x12, 0x71, 0x18,
    /* 439*211*107*83*37*19*11*7  /  double-base chain  /  338 M (=39DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x14, 0xf1, 0x02, 0x13,
    /* 383*277*223*193*167*97*59  /  double-base chain  /  393 M (=44DBL+5TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x04, 0xc1, 0x04, 0x0e, 0x61, 0x1a,
    /* 379*367*331*317*173*113  /  double-base chain  /  364 M (=29DBL+12TPL+2ADD+1M) */
    0x11, 0xd1, 0x03, 0x0b, 0xf1, 0x09, 0x12,
    /* 409*349*313*271*257*181*157*11  /  double-base chain  /  454 M (=55DBL+3TPL+4ADD+1M) */
    0x11, 0xd1, 0x02, 0x0a, 0x41, 0x19, 0x41, 0x0c, 0xe1, 0x01, 0x08,
    /* 251*239*233*149*43*17*13  /  double-base chain  /  336 M (=41DBL+2TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x10, 0x41, 0x0c, 0xf1, 0x01, 0x0d,
    /* 419*347*293*283*137*103*29*19  /  double-base chain  /  434 M (=51DBL+3TPL+5ADD+1M) */
    0x11, 0x41, 0x01, 0xc1, 0x01, 0x02, 0x41, 0x09, 0x51, 0x0c, 0xf1, 0x02, 0x1b,
    /* 457*443*401*281*61  /  double-base chain  /  311 M (=34DBL+4TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x0f, 0x41, 0x0e, 0xf1, 0x03, 0x05,
    /* 311*269*131*31  /  double-base chain  /  219 M (=22DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x10, 0xf1, 0x02, 0x06,
    /* 89*23  /  double-base chain  /  86 M (=11DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x0b,
    /* 433*431  /  double-base chain  /  137 M (=8DBL+6TPL+1ADD+1M) */
    0x11, 0xf1, 0x06, 0x08,
    /* 389*179  /  double-base chain  /  129 M (=16DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x04, 0x71, 0x0c,
    /* 463*421*353*79  /  double base expansion  /  249 M (=26DBL+4TPL+2ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x01, 0xff, 0x10, 0x51, 0x12, 0x72, 0x08,
    /* 359*263*241*191*109*47  /  double base expansion  /  343 M (=38DBL+4TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x03, 0xff, 0x13, 0x41, 0x14, 0x43, 0x02, 0x72, 0x10,
    /* 307*199*101*71*53  /  double base expansion  /  270 M (=17DBL+11TPL+2ADD+3M) */
    0x21, 0xa2, 0x0b, 0xff, 0x12, 0x41, 0x0a, 0x62, 0x07,
    /* 449*373*229*139  /  double base expansion  /  256 M (=29DBL+2TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x01, 0x00, 0x31, 0xff, 0x10, 0x53, 0x07, 0x62, 0x16,
    /* 461*397*197*151  /  double base expansion  /  257 M (=26DBL+4TPL+3ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x01, 0xff, 0x10, 0x41, 0x03, 0x42, 0x15, 0x71, 0x02,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3*3*3*3*3  /  PRAC  /  55 M (=5DBL+0TPL+5ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66,
      /* 5*5*5  /  PRAC  /  51 M (=3DBL+0TPL+6ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66,
      /* 13  /  PRAC  /  29 M (=1DBL+0TPL+4ADD+0M) */
      0x69, 0x0b, 0x0b, 0x03, 0x66,
      /* 163*41  /  PRAC  /  109 M (=5DBL+0TPL+14ADD+0M) */
      0x69, 0x02, 0x03, 0x0b, 0x0b, 0x03, 0x66, 0x69, 0x02, 0x0b, 0x0b, 0x0b, 0x0b, 0x02, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=464 */

/* B1=486 computed with 21 blocks, cost=5329M */
static const uint8_t _B1_486_bc[] = {
    0x03,
    /* 337*227*127*73*67*17*7*7  /  double-base chain  /  335 M (=42DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x12, 0x71, 0x18,
    /* 439*211*107*83*37*19*11*7  /  double-base chain  /  338 M (=39DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x14, 0xf1, 0x02, 0x13,
    /* 383*277*223*193*167*97*59  /  double-base chain  /  393 M (=44DBL+5TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x04, 0xc1, 0x04, 0x0e, 0x61, 0x1a,
    /* 409*349*313*271*257*181*157*11  /  double-base chain  /  454 M (=55DBL+3TPL+4ADD+1M) */
    0x11, 0xd1, 0x02, 0x0a, 0x41, 0x19, 0x41, 0x0c, 0xe1, 0x01, 0x08,
    /* 307*233*151*137*43*19*17*13  /  double-base chain  /  365 M (=40DBL+5TPL+3ADD+1M) */
    0x11, 0xc1, 0x04, 0x11, 0xc1, 0x01, 0x07, 0x61, 0x10,
    /* 457*443*401*281*61  /  double-base chain  /  311 M (=34DBL+4TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x0f, 0x41, 0x0e, 0xf1, 0x03, 0x05,
    /* 379*331*317*173  /  double-base chain  /  253 M (=20DBL+8TPL+2ADD+1M) */
    0x11, 0xc1, 0x04, 0x0b, 0xe1, 0x04, 0x09,
    /* 479*293*269  /  double-base chain  /  195 M (=22DBL+2TPL+2ADD+1M) */
    0x11, 0x41, 0x0d, 0xf1, 0x02, 0x09,
    /* 449*367*283*239*139*89*31  /  double-base chain  /  404 M (=45DBL+4TPL+5ADD+1M) */
    0x11, 0x41, 0x01, 0xd1, 0x02, 0x08, 0x51, 0x0e, 0x51, 0x08, 0xf1, 0x02, 0x0e,
    /* 433*431  /  double-base chain  /  137 M (=8DBL+6TPL+1ADD+1M) */
    0x11, 0xf1, 0x06, 0x08,
    /* 397*373*103*71  /  double-base chain  /  239 M (=22DBL+5TPL+3ADD+1M) */
    0x11, 0x41, 0x04, 0xd1, 0x05, 0x09, 0x61, 0x09,
    /* 463*419*251  /  double-base chain  /  205 M (=24DBL+1TPL+3ADD+1M) */
    0x11, 0x51, 0x05, 0xd1, 0x01, 0x03, 0x71, 0x10,
    /* 347*131*79*23*13  /  double-base chain  /  243 M (=30DBL+0TPL+4ADD+1M) */
    0x11, 0x51, 0x13, 0x41, 0x07, 0x41, 0x02, 0x61, 0x02,
    /* 467*421*179*101*29  /  double base expansion  /  276 M (=35DBL+1TPL+2ADD+3M) */
    0x21, 0xa2, 0x01, 0xff, 0x12, 0x41, 0x13, 0x72, 0x10,
    /* 389*311*229*199*197*41  /  double base expansion  /  348 M (=39DBL+4TPL+3ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x01, 0xff, 0x10, 0x41, 0x0b, 0x52, 0x03, 0x72, 0x19,
    /* 461*353*163*149*113  /  double base expansion  /  298 M (=37DBL+1TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0xff, 0x12, 0x41, 0x02, 0x51, 0x09, 0x62, 0x1a,
    /* 359*263*241*191*109*47  /  double base expansion  /  343 M (=38DBL+4TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x03, 0xff, 0x13, 0x41, 0x14, 0x43, 0x02, 0x72, 0x10,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 3*3*3*3*3  /  PRAC  /  55 M (=5DBL+0TPL+5ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66,
      /* 5*5*5  /  PRAC  /  51 M (=3DBL+0TPL+6ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66,
      /* 53  /  PRAC  /  50 M (=4DBL+0TPL+5ADD+0M) */
      0x69, 0x02, 0x02, 0x0b, 0x02, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=486 */

/* B1=508 computed with 21 blocks, cost=5605M */
static const uint8_t _B1_508_bc[] = {
    0x03,
    /* 331*151*31*11*7*3*3  /  double-base chain  /  219 M (=30DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1e,
    /* 337*227*127*73*67*17*7*7  /  double-base chain  /  335 M (=42DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x12, 0x71, 0x18,
    /* 211*107*19*11  /  double-base chain  /  166 M (=19DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x13,
    /* 499*373*281*271*199*163*103*13  /  double-base chain  /  445 M (=48DBL+7TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x0d, 0xc1, 0x03, 0x15, 0xf1, 0x03, 0x0e,
    /* 383*277*223*193*167*97*59  /  double-base chain  /  393 M (=44DBL+5TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x04, 0xc1, 0x04, 0x0e, 0x61, 0x1a,
    /* 433*349*313*83  /  double-base chain  /  242 M (=27DBL+3TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x02, 0xf1, 0x02, 0x19,
    /* 439*431*367*191*173*131  /  double-base chain  /  368 M (=37DBL+7TPL+3ADD+1M) */
    0x11, 0xd1, 0x03, 0x17, 0x51, 0x0d, 0xe1, 0x04, 0x01,
    /* 353*317*311*307*293*269*157*149  /  double-base chain  /  496 M (=53DBL+7TPL+5ADD+1M) */
    0x11, 0x41, 0x21, 0xc1, 0x01, 0x01, 0xd1, 0x05, 0x04, 0x41, 0x05, 0xe1, 0x01, 0x0a,
    /* 487*479*457*251*13  /  double-base chain  /  297 M (=32DBL+4TPL+3ADD+1M) */
    0x11, 0xd1, 0x02, 0x0a, 0xd1, 0x02, 0x0a, 0x71, 0x0c,
    /* 397*197*181  /  double-base chain  /  186 M (=19DBL+3TPL+2ADD+1M) */
    0x11, 0x41, 0x12, 0xf1, 0x03, 0x01,
    /* 449*89*41  /  double-base chain  /  162 M (=19DBL+1TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0x61, 0x10,
    /* 409*379*79*37  /  double-base chain  /  229 M (=24DBL+3TPL+3ADD+1M) */
    0x11, 0x41, 0x0c, 0x41, 0x06, 0xe1, 0x03, 0x06,
    /* 503*283*139*53*19  /  double-base chain  /  274 M (=31DBL+2TPL+4ADD+1M) */
    0x11, 0x41, 0x05, 0xd1, 0x01, 0x05, 0x51, 0x08, 0xe1, 0x01, 0x0d,
    /* 443*401*239*229*23  /  double-base chain  /  305 M (=36DBL+1TPL+5ADD+1M) */
    0x11, 0xc1, 0x01, 0x02, 0x41, 0x06, 0x41, 0x05, 0x41, 0x01, 0x71, 0x16,
    /* 467*421*179*101*29  /  double base expansion  /  276 M (=35DBL+1TPL+2ADD+3M) */
    0x21, 0xa2, 0x01, 0xff, 0x12, 0x41, 0x13, 0x72, 0x10,
    /* 347*137*71*47*43*17  /  double base expansion  /  279 M (=32DBL+3TPL+2ADD+3M) */
    0x21, 0xa2, 0x02, 0x80, 0x01, 0xff, 0x10, 0x41, 0x1b, 0x62, 0x05,
    /* 491*359*263*233*113*109*61  /  double base expansion  /  406 M (=37DBL+10TPL+3ADD+3M) */
    0x21, 0xa2, 0x07, 0x80, 0x03, 0xff, 0x10, 0x51, 0x10, 0x41, 0x0b, 0x62, 0x0a,
    /* 463*419*389*257  /  double base expansion  /  268 M (=31DBL+2TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0x80, 0x01, 0xff, 0x10, 0x41, 0x05, 0x42, 0x13, 0x61, 0x07,
    /* 461*241  /  double base expansion  /  139 M (=12DBL+3TPL+2ADD+3M) */
    0x21, 0xa2, 0x01, 0x80, 0x02, 0xff, 0x10, 0x41, 0x03, 0x72, 0x09,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3*3  /  PRAC  /  84 M (=6DBL+0TPL+9ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2  /  PRAC  /  40 M (=8DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=508 */

/* B1=531 computed with 21 blocks, cost=5846M */
static const uint8_t _B1_531_bc[] = {
    0x03,
    /* 337*227*127*73*67*17*7*7  /  double-base chain  /  335 M (=42DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x12, 0x71, 0x18,
    /* 359*313*263*223*137*109*103*83*37*3  /  double-base chain  /  493 M (=60DBL+4TPL+3ADD+1M) */
    0x11, 0xd1, 0x02, 0x1d, 0xd1, 0x02, 0x09, 0x61, 0x16,
    /* 503*449*113*59*53*31  /  double-base chain  /  307 M (=38DBL+2TPL+2ADD+1M) */
    0x11, 0x51, 0x21, 0xf1, 0x02, 0x05,
    /* 431*211*107*23*19*17*11*7  /  double-base chain  /  317 M (=36DBL+4TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x13, 0xf1, 0x03, 0x11,
    /* 523*349*97*71*41  /  double-base chain  /  267 M (=34DBL+1TPL+2ADD+1M) */
    0x11, 0x51, 0x17, 0xe1, 0x01, 0x0b,
    /* 521*409*353*257*173*89*19  /  double-base chain  /  395 M (=46DBL+4TPL+3ADD+1M) */
    0x11, 0x51, 0x07, 0xc1, 0x02, 0x18, 0xf1, 0x02, 0x0f,
    /* 509*499*241*149*43  /  double-base chain  /  292 M (=29DBL+6TPL+2ADD+1M) */
    0x11, 0xc1, 0x05, 0x01, 0xe1, 0x01, 0x1c,
    /* 373*283*277*199*167*79*11  /  double-base chain  /  381 M (=48DBL+1TPL+4ADD+1M) */
    0x11, 0x41, 0x11, 0x41, 0x0d, 0xc1, 0x01, 0x03, 0x71, 0x0f,
    /* 457*443*401*281*61  /  double-base chain  /  311 M (=34DBL+4TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x0f, 0x41, 0x0e, 0xf1, 0x03, 0x05,
    /* 479*293*269  /  double-base chain  /  195 M (=22DBL+2TPL+2ADD+1M) */
    0x11, 0x41, 0x0d, 0xf1, 0x02, 0x09,
    /* 491*383*331*229*139  /  double-base chain  /  320 M (=25DBL+10TPL+3ADD+1M) */
    0x11, 0xd1, 0x03, 0x0c, 0x41, 0x07, 0xe1, 0x07, 0x06,
    /* 487*397*233*181  /  double-base chain  /  260 M (=25DBL+5TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x10, 0xc1, 0x02, 0x05, 0xf1, 0x02, 0x04,
    /* 461*439*419*251*13  /  double-base chain  /  302 M (=19DBL+12TPL+3ADD+1M) */
    0x11, 0xd1, 0x02, 0x04, 0xd1, 0x01, 0x09, 0xf1, 0x09, 0x06,
    /* 433*379*307  /  double-base chain  /  205 M (=24DBL+1TPL+3ADD+1M) */
    0x11, 0x41, 0x0a, 0x41, 0x0a, 0xe1, 0x01, 0x04,
    /* 311*271*239*193*157*13  /  double-base chain  /  350 M (=27DBL+10TPL+5ADD+1M) */
    0x11, 0xc1, 0x03, 0x05, 0xc1, 0x04, 0x01, 0xc1, 0x01, 0x0c, 0xd1, 0x02, 0x03, 0x71, 0x06,
    /* 191  /  double-base chain  /  63 M (=6DBL+1TPL+1ADD+1M) */
    0x11, 0xf1, 0x01, 0x06,
    /* 467*421*179*101*29  /  double base expansion  /  276 M (=35DBL+1TPL+2ADD+3M) */
    0x21, 0xa2, 0x01, 0xff, 0x12, 0x41, 0x13, 0x72, 0x10,
    /* 389*367*347*163*151*131*23  /  double base expansion  /  398 M (=39DBL+8TPL+3ADD+5M) */
    0x21, 0xa2, 0x05, 0xa3, 0x03, 0xff, 0x13, 0x42, 0x01, 0x43, 0x17, 0x61, 0x0f,
    /* 463*317*197*47  /  double base expansion  /  243 M (=24DBL+4TPL+3ADD+3M) */
    0x21, 0xa2, 0x04, 0xff, 0x12, 0x51, 0x0f, 0x52, 0x05, 0x61, 0x04,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3*3*3  /  PRAC  /  95 M (=7DBL+0TPL+10ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=531 */

/* B1=554 computed with 23 blocks, cost=5986M */
static const uint8_t _B1_554_bc[] = {
    0x03,
    /* 337*227*127*73*67*17*7*7  /  double-base chain  /  335 M (=42DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x12, 0x71, 0x18,
    /* 359*313*263*223*137*109*103*83*37*3  /  double-base chain  /  493 M (=60DBL+4TPL+3ADD+1M) */
    0x11, 0xd1, 0x02, 0x1d, 0xd1, 0x02, 0x09, 0x61, 0x16,
    /* 503*449*113*59*53*31  /  double-base chain  /  307 M (=38DBL+2TPL+2ADD+1M) */
    0x11, 0x51, 0x21, 0xf1, 0x02, 0x05,
    /* 431*211*107*23*19*17*11*7  /  double-base chain  /  317 M (=36DBL+4TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x13, 0xf1, 0x03, 0x11,
    /* 523*349*97*71*41  /  double-base chain  /  267 M (=34DBL+1TPL+2ADD+1M) */
    0x11, 0x51, 0x17, 0xe1, 0x01, 0x0b,
    /* 521*409*353*257*173*89*19  /  double-base chain  /  395 M (=46DBL+4TPL+3ADD+1M) */
    0x11, 0x51, 0x07, 0xc1, 0x02, 0x18, 0xf1, 0x02, 0x0f,
    /* 509*499*241*149*43  /  double-base chain  /  292 M (=29DBL+6TPL+2ADD+1M) */
    0x11, 0xc1, 0x05, 0x01, 0xe1, 0x01, 0x1c,
    /* 373*283*277*199*167*79*11  /  double-base chain  /  381 M (=48DBL+1TPL+4ADD+1M) */
    0x11, 0x41, 0x11, 0x41, 0x0d, 0xc1, 0x01, 0x03, 0x71, 0x0f,
    /* 457*443*401*281*61  /  double-base chain  /  311 M (=34DBL+4TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x0f, 0x41, 0x0e, 0xf1, 0x03, 0x05,
    /* 193*191  /  double-base chain  /  117 M (=12DBL+2TPL+1ADD+1M) */
    0x11, 0xf1, 0x02, 0x0c,
    /* 479*293*269  /  double-base chain  /  195 M (=22DBL+2TPL+2ADD+1M) */
    0x11, 0x41, 0x0d, 0xf1, 0x02, 0x09,
    /* 491*383*331*229*139  /  double-base chain  /  320 M (=25DBL+10TPL+3ADD+1M) */
    0x11, 0xd1, 0x03, 0x0c, 0x41, 0x07, 0xe1, 0x07, 0x06,
    /* 461*317*311*251*197*163*157  /  double-base chain  /  438 M (=43DBL+8TPL+5ADD+1M) */
    0x11, 0xd1, 0x02, 0x05, 0x51, 0x0a, 0x51, 0x0a, 0xc1, 0x01, 0x06, 0xf1, 0x05, 0x0c,
    /* 541*389*367*347*13  /  double-base chain  /  302 M (=19DBL+12TPL+3ADD+1M) */
    0x11, 0x41, 0x02, 0xc1, 0x02, 0x06, 0xe1, 0x0a, 0x0b,
    /* 487*397*233*181  /  double-base chain  /  260 M (=25DBL+5TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x10, 0xc1, 0x02, 0x05, 0xf1, 0x02, 0x04,
    /* 433*379*307  /  double-base chain  /  205 M (=24DBL+1TPL+3ADD+1M) */
    0x11, 0x41, 0x0a, 0x41, 0x0a, 0xe1, 0x01, 0x04,
    /* 239*47  /  double-base chain  /  114 M (=7DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x02, 0xe1, 0x03, 0x05,
    /* 467*421*179*101*29  /  double base expansion  /  276 M (=35DBL+1TPL+2ADD+3M) */
    0x21, 0xa2, 0x01, 0xff, 0x12, 0x41, 0x13, 0x72, 0x10,
    /* 463*439*419*151  /  double base expansion  /  263 M (=32DBL+1TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0xff, 0x12, 0x52, 0x09, 0x41, 0x06, 0x72, 0x11,
    /* 547*271*131*23  /  double base expansion  /  233 M (=24DBL+3TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x02, 0xff, 0x13, 0x52, 0x03, 0x53, 0x0a, 0x61, 0x0b,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3*3*3  /  PRAC  /  95 M (=7DBL+0TPL+10ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66,
      /* 13  /  PRAC  /  29 M (=1DBL+0TPL+4ADD+0M) */
      0x69, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=554 */

/* B1=577 computed with 24 blocks, cost=6330M */
static const uint8_t _B1_577_bc[] = {
    0x03,
    /* 331*151*31*11*7*3*3  /  double-base chain  /  219 M (=30DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1e,
    /* 337*227*127*73*67*17*7*7  /  double-base chain  /  335 M (=42DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x12, 0x71, 0x18,
    /* 577*569*401*43*23*19  /  double-base chain  /  307 M (=38DBL+2TPL+2ADD+1M) */
    0x11, 0x41, 0x21, 0xf1, 0x02, 0x05,
    /* 211*107*19*11  /  double-base chain  /  166 M (=19DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x13,
    /* 523*349*97*71*41  /  double-base chain  /  267 M (=34DBL+1TPL+2ADD+1M) */
    0x11, 0x51, 0x17, 0xe1, 0x01, 0x0b,
    /* 479*443*313*293*113  /  double-base chain  /  312 M (=41DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x15, 0x41, 0x03, 0x61, 0x11,
    /* 439*431*367*191*173*131  /  double-base chain  /  368 M (=37DBL+7TPL+3ADD+1M) */
    0x11, 0xd1, 0x03, 0x17, 0x51, 0x0d, 0xe1, 0x04, 0x01,
    /* 461*421*389  /  double-base chain  /  202 M (=23DBL+2TPL+2ADD+1M) */
    0x11, 0x41, 0x15, 0xe1, 0x02, 0x02,
    /* 521*499*383*379*359*229*79  /  double-base chain  /  448 M (=53DBL+3TPL+5ADD+1M) */
    0x11, 0x41, 0x07, 0xc1, 0x01, 0x18, 0x51, 0x0f, 0xc1, 0x01, 0x05, 0xf1, 0x01, 0x02,
    /* 277*251*193*157*83  /  double-base chain  /  290 M (=31DBL+4TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x06, 0x41, 0x07, 0xe1, 0x03, 0x12,
    /* 503*491*257*181*103  /  double-base chain  /  312 M (=29DBL+7TPL+3ADD+1M) */
    0x11, 0x41, 0x07, 0xc1, 0x01, 0x13, 0xf1, 0x06, 0x03,
    /* 457*397*353*239*167*139*59*13  /  double-base chain  /  451 M (=50DBL+5TPL+5ADD+1M) */
    0x11, 0x51, 0x08, 0xd1, 0x02, 0x09, 0x41, 0x03, 0x41, 0x18, 0xe1, 0x03, 0x06,
    /* 449*433*281*199  /  double-base chain  /  262 M (=27DBL+4TPL+3ADD+1M) */
    0x11, 0xd1, 0x04, 0x0c, 0x41, 0x05, 0x71, 0x0a,
    /* 547*509*409*347*307*223  /  double-base chain  /  408 M (=37DBL+9TPL+5ADD+1M) */
    0x11, 0xd1, 0x08, 0x0f, 0x51, 0x06, 0x41, 0x05, 0x41, 0x03, 0xe1, 0x01, 0x08,
    /* 563*541*467*419*373*197*137*47*37*29  /  double base expansion  /  557 M (=62DBL+8TPL+3ADD+3M) */
    0x21, 0xa2, 0x08, 0xff, 0x12, 0x51, 0x1a, 0x52, 0x04, 0x62, 0x20,
    /* 487*317*241*163*89*23*17  /  double base expansion  /  361 M (=46DBL+1TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0xff, 0x12, 0x51, 0x0a, 0x52, 0x0e, 0x71, 0x16,
    /* 571*269*263*179  /  double base expansion  /  251 M (=28DBL+3TPL+2ADD+3M) */
    0x21, 0xa2, 0x03, 0xff, 0x12, 0x51, 0x04, 0x62, 0x18,
    /* 463*311*283*109*61*13  /  double base expansion  /  328 M (=29DBL+8TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x03, 0x80, 0x04, 0xff, 0x10, 0x52, 0x04, 0x41, 0x0e, 0x73, 0x0b,
    /* 557*271*149*101*53  /  double base expansion  /  296 M (=21DBL+10TPL+3ADD+5M) */
    0x21, 0xa2, 0x02, 0xa3, 0x06, 0x80, 0x02, 0xff, 0x10, 0x53, 0x02, 0x51, 0x0a, 0x72, 0x09,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*3  /  PRAC  /  28 M (=2DBL+0TPL+3ADD+0M) */
      0x69, 0x66, 0x69, 0x03, 0x66,
      /* 5*3  /  PRAC  /  28 M (=2DBL+0TPL+3ADD+0M) */
      0x69, 0x66, 0x69, 0x03, 0x66,
      /* 5*3  /  PRAC  /  28 M (=2DBL+0TPL+3ADD+0M) */
      0x69, 0x66, 0x69, 0x03, 0x66,
      /* 233  /  PRAC  /  65 M (=1DBL+0TPL+10ADD+0M) */
      0x69, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=577 */

/* B1=601 computed with 25 blocks, cost=6601M */
static const uint8_t _B1_601_bc[] = {
    0x03,
    /* 587*367*349*263*107*89*41*7*3  /  double-base chain  /  419 M (=54DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x19, 0x61, 0x1d,
    /* 593*269*157*101*53*23*23  /  double-base chain  /  339 M (=46DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x07, 0x61, 0x27,
    /* 337*227*127*73*67*17*7*7  /  double-base chain  /  335 M (=42DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x12, 0x71, 0x18,
    /* 599*509*283*281*239*61*43  /  double-base chain  /  404 M (=49DBL+3TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x28, 0xd1, 0x01, 0x04, 0xe1, 0x01, 0x05,
    /* 383*277*223*193*167*97*59  /  double-base chain  /  393 M (=44DBL+5TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x04, 0xc1, 0x04, 0x0e, 0x61, 0x1a,
    /* 433*359*257*11*11  /  double-base chain  /  244 M (=29DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x08, 0x71, 0x15,
    /* 521*271*241*71  /  double-base chain  /  237 M (=28DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x17, 0xe1, 0x01, 0x05,
    /* 479*443*313*293*113  /  double-base chain  /  312 M (=41DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x15, 0x41, 0x03, 0x61, 0x11,
    /* 487*251*151*31*19  /  double-base chain  /  254 M (=27DBL+4TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x15, 0xf1, 0x02, 0x06,
    /* 461*421*389  /  double-base chain  /  202 M (=23DBL+2TPL+2ADD+1M) */
    0x11, 0x41, 0x15, 0xe1, 0x02, 0x02,
    /* 379*331*317*173  /  double-base chain  /  253 M (=20DBL+8TPL+2ADD+1M) */
    0x11, 0xc1, 0x04, 0x0b, 0xe1, 0x04, 0x09,
    /* 499*457*191*17*13  /  double-base chain  /  259 M (=30DBL+2TPL+3ADD+1M) */
    0x11, 0x51, 0x08, 0x51, 0x0d, 0xe1, 0x02, 0x09,
    /* 571*569*401*233*163  /  double-base chain  /  330 M (=39DBL+2TPL+4ADD+1M) */
    0x11, 0xc1, 0x02, 0x0b, 0x41, 0x06, 0x41, 0x07, 0x61, 0x0f,
    /* 547*523*307*149  /  double-base chain  /  264 M (=13DBL+13TPL+2ADD+1M) */
    0x11, 0x41, 0x09, 0xf1, 0x0d, 0x04,
    /* 449*397*199*83  /  double-base chain  /  248 M (=25DBL+4TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x02, 0xd1, 0x02, 0x07, 0xe1, 0x01, 0x10,
    /* 347*229*211*19  /  double-base chain  /  225 M (=20DBL+5TPL+3ADD+1M) */
    0x11, 0x41, 0x02, 0x41, 0x0a, 0xf1, 0x05, 0x08,
    /* 431*409*139*109*103  /  double-base chain  /  304 M (=25DBL+8TPL+4ADD+1M) */
    0x11, 0x41, 0x02, 0xd1, 0x02, 0x06, 0x51, 0x0d, 0xf1, 0x06, 0x04,
    /* 557*353  /  double-base chain  /  141 M (=16DBL+1TPL+2ADD+1M) */
    0x11, 0x41, 0x0e, 0xe1, 0x01, 0x02,
    /* 563*541*467*419*373*197*137*47*37*29  /  double base expansion  /  557 M (=62DBL+8TPL+3ADD+3M) */
    0x21, 0xa2, 0x08, 0xff, 0x12, 0x51, 0x1a, 0x52, 0x04, 0x62, 0x20,
    /* 577*503*311*181*131*79  /  double base expansion  /  366 M (=33DBL+9TPL+3ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x06, 0xff, 0x10, 0x51, 0x10, 0x42, 0x0c, 0x61, 0x05,
    /* 601*491*463*179  /  double base expansion  /  274 M (=25DBL+6TPL+3ADD+3M) */
    0x21, 0xa2, 0x06, 0xff, 0x12, 0x41, 0x05, 0x52, 0x07, 0x72, 0x0d,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3*3*3  /  PRAC  /  95 M (=7DBL+0TPL+10ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66,
      /* 13  /  PRAC  /  29 M (=1DBL+0TPL+4ADD+0M) */
      0x69, 0x0b, 0x0b, 0x03, 0x66,
      /* 439  /  PRAC  /  76 M (=2DBL+0TPL+11ADD+0M) */
      0x69, 0x03, 0x0b, 0x0b, 0x0b, 0x03, 0x0b, 0x02, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=601 */

/* B1=626 computed with 24 blocks, cost=6912M */
static const uint8_t _B1_626_bc[] = {
    0x03,
    /* 109*73*37*19*13*7*5*3*3*3  /  double-base chain  /  261 M (=36DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x24,
    /* 587*367*349*263*107*89*41*7*3  /  double-base chain  /  419 M (=54DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x19, 0x61, 0x1d,
    /* 593*269*157*101*53*23*23  /  double-base chain  /  339 M (=46DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x07, 0x61, 0x27,
    /* 409*149*59*31*17*17  /  double-base chain  /  260 M (=33DBL+1TPL+2ADD+1M) */
    0x11, 0x41, 0x02, 0xe1, 0x01, 0x1f,
    /* 599*509*283*281*239*61*43  /  double-base chain  /  404 M (=49DBL+3TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x28, 0xd1, 0x01, 0x04, 0xe1, 0x01, 0x05,
    /* 499*467*421*197  /  double-base chain  /  258 M (=31DBL+2TPL+2ADD+1M) */
    0x11, 0x51, 0x10, 0xe1, 0x02, 0x0f,
    /* 337*317*271*223*179*137  /  double-base chain  /  357 M (=44DBL+2TPL+3ADD+1M) */
    0x11, 0x51, 0x0e, 0xc1, 0x01, 0x03, 0xf1, 0x01, 0x1b,
    /* 461*241*211*199*193*151*79*11*11  /  double-base chain  /  456 M (=57DBL+2TPL+4ADD+1M) */
    0x11, 0x41, 0x09, 0xc1, 0x01, 0x09, 0xc1, 0x01, 0x13, 0x61, 0x14,
    /* 479*443*313*293*113  /  double-base chain  /  312 M (=41DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x15, 0x41, 0x03, 0x61, 0x11,
    /* 463*439*347*227*103  /  double-base chain  /  310 M (=39DBL+1TPL+3ADD+1M) */
    0x11, 0x51, 0x0d, 0xc1, 0x01, 0x13, 0x71, 0x07,
    /* 607*487*173*163*127*83*71*67  /  double-base chain  /  456 M (=49DBL+6TPL+5ADD+1M) */
    0x11, 0xc1, 0x03, 0x01, 0xc1, 0x01, 0x0f, 0x51, 0x06, 0x51, 0x06, 0xf1, 0x02, 0x15,
    /* 491*383*331*229*139  /  double-base chain  /  320 M (=25DBL+10TPL+3ADD+1M) */
    0x11, 0xd1, 0x03, 0x0c, 0x41, 0x07, 0xe1, 0x07, 0x06,
    /* 613*523*397*19  /  double-base chain  /  245 M (=28DBL+2TPL+3ADD+1M) */
    0x11, 0x41, 0x0a, 0x51, 0x0e, 0xe1, 0x02, 0x04,
    /* 577*433*277*13  /  double-base chain  /  236 M (=25DBL+3TPL+3ADD+1M) */
    0x11, 0xd1, 0x02, 0x04, 0x51, 0x0d, 0xe1, 0x01, 0x08,
    /* 619*571*389*257*251  /  double-base chain  /  342 M (=43DBL+0TPL+5ADD+1M) */
    0x11, 0x41, 0x07, 0x41, 0x04, 0x41, 0x06, 0x41, 0x10, 0x71, 0x0a,
    /* 521*379*311*131  /  double-base chain  /  262 M (=31DBL+1TPL+4ADD+1M) */
    0x11, 0x41, 0x02, 0xd1, 0x01, 0x06, 0x41, 0x0c, 0x71, 0x0b,
    /* 557*353  /  double-base chain  /  141 M (=16DBL+1TPL+2ADD+1M) */
    0x11, 0x41, 0x0e, 0xe1, 0x01, 0x02,
    /* 563*541*419*47*29  /  double base expansion  /  284 M (=31DBL+4TPL+2ADD+3M) */
    0x21, 0xa2, 0x04, 0xff, 0x12, 0x41, 0x0d, 0x72, 0x12,
    /* 601*449*431*191*167  /  double base expansion  /  322 M (=37DBL+3TPL+3ADD+3M) */
    0x21, 0xa2, 0x02, 0x80, 0x01, 0xff, 0x10, 0x51, 0x07, 0x52, 0x18, 0x71, 0x06,
    /* 569*547*307  /  double base expansion  /  210 M (=17DBL+6TPL+2ADD+3M) */
    0x21, 0xa2, 0x04, 0x80, 0x02, 0xff, 0x10, 0x41, 0x0c, 0x62, 0x05,
    /* 503*401*373*181*97  /  double base expansion  /  319 M (=26DBL+9TPL+3ADD+5M) */
    0x21, 0xa2, 0x03, 0xa3, 0x06, 0xff, 0x13, 0x41, 0x06, 0x53, 0x12, 0x62, 0x02,
    /* 617*457*359*233*7  /  double base expansion  /  296 M (=23DBL+9TPL+3ADD+3M) */
    0x21, 0xa2, 0x06, 0x80, 0x03, 0xff, 0x10, 0x52, 0x09, 0x41, 0x0d, 0x72, 0x01,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3  /  PRAC  /  62 M (=4DBL+0TPL+7ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=626 */

/* B1=651 computed with 25 blocks, cost=7201M */
static const uint8_t _B1_651_bc[] = {
    0x03,
    /* 587*367*349*263*107*89*41*7*3  /  double-base chain  /  419 M (=54DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x19, 0x61, 0x1d,
    /* 593*269*157*101*53*23*23  /  double-base chain  /  339 M (=46DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x07, 0x61, 0x27,
    /* 337*227*127*73*67*17*7*7  /  double-base chain  /  335 M (=42DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x12, 0x71, 0x18,
    /* 617*347*331*167*83*17  /  double-base chain  /  329 M (=36DBL+5TPL+2ADD+1M) */
    0x11, 0xc1, 0x05, 0x22, 0x61, 0x02,
    /* 599*509*283*281*239*61*43  /  double-base chain  /  404 M (=49DBL+3TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x28, 0xd1, 0x01, 0x04, 0xe1, 0x01, 0x05,
    /* 461*241*211*199*193*151*79*11*11  /  double-base chain  /  456 M (=57DBL+2TPL+4ADD+1M) */
    0x11, 0x41, 0x09, 0xc1, 0x01, 0x09, 0xc1, 0x01, 0x13, 0x61, 0x14,
    /* 479*443*313*293*113  /  double-base chain  /  312 M (=41DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x15, 0x41, 0x03, 0x61, 0x11,
    /* 491*179*173*149*59*13  /  double-base chain  /  311 M (=34DBL+4TPL+3ADD+1M) */
    0x11, 0x41, 0x02, 0xd1, 0x01, 0x06, 0xf1, 0x03, 0x1a,
    /* 571*191*71*13  /  double-base chain  /  204 M (=25DBL+1TPL+2ADD+1M) */
    0x11, 0x41, 0x18, 0xe1, 0x01, 0x01,
    /* 647*457*383  /  double-base chain  /  207 M (=22DBL+3TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x0f, 0xe1, 0x02, 0x07,
    /* 641*577*523*503*379*359*31  /  double-base chain  /  456 M (=49DBL+6TPL+5ADD+1M) */
    0x11, 0x41, 0x12, 0x51, 0x04, 0xd1, 0x03, 0x07, 0xd1, 0x01, 0x11, 0xf1, 0x02, 0x03,
    /* 601*401*257*251*163*131*103  /  double-base chain  /  430 M (=47DBL+5TPL+5ADD+1M) */
    0x11, 0xd1, 0x02, 0x09, 0xc1, 0x02, 0x0c, 0x41, 0x14, 0x41, 0x04, 0xe1, 0x01, 0x02,
    /* 431*233*229*223*181  /  double-base chain  /  314 M (=35DBL+3TPL+4ADD+1M) */
    0x11, 0x41, 0x0b, 0x41, 0x03, 0xd1, 0x01, 0x0e, 0xe1, 0x02, 0x07,
    /* 487*463*317*19  /  double-base chain  /  241 M (=24DBL+4TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x09, 0xc1, 0x01, 0x07, 0xf1, 0x02, 0x08,
    /* 607*449*277  /  double-base chain  /  210 M (=23DBL+2TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x0d, 0x41, 0x08, 0xf1, 0x01, 0x02,
    /* 619*569*397*311  /  double-base chain  /  284 M (=29DBL+4TPL+4ADD+1M) */
    0x11, 0xd1, 0x01, 0x11, 0xc1, 0x01, 0x04, 0xd1, 0x01, 0x04, 0xe1, 0x01, 0x04,
    /* 643*613*557*421*271  /  double-base chain  /  358 M (=35DBL+6TPL+5ADD+1M) */
    0x11, 0xc1, 0x04, 0x0d, 0xd1, 0x01, 0x07, 0x51, 0x06, 0xc1, 0x01, 0x03, 0x61, 0x06,
    /* 563*541*467*419*373*197*137*47*37*29  /  double base expansion  /  557 M (=62DBL+8TPL+3ADD+3M) */
    0x21, 0xa2, 0x08, 0xff, 0x12, 0x51, 0x1a, 0x52, 0x04, 0x62, 0x20,
    /* 547*521*499*439*353*97  /  double base expansion  /  390 M (=43DBL+5TPL+3ADD+5M) */
    0x21, 0xa2, 0x02, 0xa3, 0x03, 0xff, 0x13, 0x41, 0x07, 0x43, 0x07, 0x72, 0x1d,
    /* 631*433*409*389*139*19  /  double base expansion  /  363 M (=34DBL+8TPL+3ADD+5M) */
    0x21, 0xa2, 0x03, 0xa3, 0x02, 0x80, 0x03, 0xff, 0x10, 0x43, 0x01, 0x51, 0x07, 0x62, 0x1a,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*3*3  /  PRAC  /  56 M (=4DBL+0TPL+6ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x66,
      /* 5*5*3*3  /  PRAC  /  56 M (=4DBL+0TPL+6ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x66,
      /* 109  /  PRAC  /  58 M (=2DBL+0TPL+8ADD+0M) */
      0x69, 0x02, 0x0b, 0x0b, 0x03, 0x0b, 0x0b, 0x03, 0x66,
      /* 307  /  PRAC  /  71 M (=1DBL+0TPL+11ADD+0M) */
      0x69, 0x03, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x0b, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=651 */

/* B1=676 computed with 25 blocks, cost=7485M */
static const uint8_t _B1_676_bc[] = {
    0x03,
    /* 673*257*241*97*17*13*7*5*3*3  /  double-base chain  /  345 M (=48DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x30,
    /* 587*367*349*263*107*89*41*7*3  /  double-base chain  /  419 M (=54DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x19, 0x61, 0x1d,
    /* 593*269*157*101*53*23*23  /  double-base chain  /  339 M (=46DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x07, 0x61, 0x27,
    /* 439*227*83*73*67*37*17*7  /  double-base chain  /  352 M (=41DBL+4TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x15, 0xf1, 0x02, 0x14,
    /* 599*509*283*281*239*61*43  /  double-base chain  /  404 M (=49DBL+3TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x28, 0xd1, 0x01, 0x04, 0xe1, 0x01, 0x05,
    /* 443*409*353*211*163*127*113*13  /  double-base chain  /  440 M (=49DBL+6TPL+3ADD+1M) */
    0x11, 0xc1, 0x05, 0x17, 0xd1, 0x01, 0x0d, 0x61, 0x0d,
    /* 487*389*233*199*149*137*131*31*19  /  double-base chain  /  479 M (=62DBL+1TPL+4ADD+1M) */
    0x11, 0x41, 0x20, 0x41, 0x11, 0x41, 0x05, 0xf1, 0x01, 0x08,
    /* 499*467*421*197  /  double-base chain  /  258 M (=31DBL+2TPL+2ADD+1M) */
    0x11, 0x51, 0x10, 0xe1, 0x02, 0x0f,
    /* 641*571*523*337*151  /  double-base chain  /  330 M (=35DBL+5TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x01, 0x51, 0x12, 0xf1, 0x04, 0x10,
    /* 661*173*139*19  /  double-base chain  /  216 M (=25DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x0b, 0x61, 0x0e,
    /* 457*193*191*11*11  /  double-base chain  /  238 M (=23DBL+5TPL+2ADD+1M) */
    0x11, 0xd1, 0x03, 0x0c, 0xf1, 0x02, 0x0b,
    /* 647*619*607*433*383*229*79  /  double-base chain  /  460 M (=53DBL+4TPL+5ADD+1M) */
    0x11, 0xd1, 0x01, 0x0a, 0x51, 0x08, 0xc1, 0x01, 0x03, 0xd1, 0x02, 0x06, 0x71, 0x1a,
    /* 617*503*463*311*181*179*71  /  double-base chain  /  441 M (=45DBL+7TPL+5ADD+2M) */
    0x11, 0x81, 0x01, 0x41, 0x07, 0xd1, 0x03, 0x07, 0xd1, 0x01, 0x1b, 0xf1, 0x02, 0x04,
    /* 557*379*251*109  /  double-base chain  /  255 M (=26DBL+4TPL+3ADD+1M) */
    0x11, 0x41, 0x04, 0x41, 0x0f, 0xe1, 0x04, 0x07,
    /* 491*401*293*277*59  /  double-base chain  /  314 M (=35DBL+3TPL+4ADD+1M) */
    0x11, 0x41, 0x06, 0xc1, 0x01, 0x03, 0x51, 0x0d, 0xe1, 0x02, 0x0d,
    /* 659*461*449*313  /  double-base chain  /  284 M (=29DBL+4TPL+4ADD+1M) */
    0x11, 0xd1, 0x01, 0x04, 0x41, 0x03, 0xc1, 0x01, 0x05, 0xf1, 0x02, 0x11,
    /* 613*577*271*223  /  double-base chain  /  285 M (=28DBL+4TPL+5ADD+1M) */
    0x11, 0x51, 0x06, 0xd1, 0x01, 0x02, 0xd1, 0x01, 0x0a, 0xd1, 0x01, 0x08, 0xe1, 0x01, 0x02,
    /* 563*541*419*47*29  /  double base expansion  /  284 M (=31DBL+4TPL+2ADD+3M) */
    0x21, 0xa2, 0x04, 0xff, 0x12, 0x41, 0x0d, 0x72, 0x12,
    /* 631*601*521*431*347  /  double base expansion  /  343 M (=40DBL+3TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0x80, 0x02, 0xff, 0x10, 0x51, 0x03, 0x41, 0x1b, 0x62, 0x0a,
    /* 569*547*307  /  double base expansion  /  210 M (=17DBL+6TPL+2ADD+3M) */
    0x21, 0xa2, 0x04, 0x80, 0x02, 0xff, 0x10, 0x41, 0x0c, 0x62, 0x05,
    /* 643*479*317*167  /  double base expansion  /  271 M (=26DBL+5TPL+3ADD+5M) */
    0x21, 0xa2, 0x02, 0xa3, 0x02, 0x80, 0x01, 0xff, 0x10, 0x52, 0x08, 0x53, 0x09, 0x71, 0x09,
    /* 653*373*331  /  double base expansion  /  211 M (=12DBL+9TPL+2ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x06, 0xff, 0x10, 0x51, 0x04, 0x62, 0x08,
    /* 397*359*103  /  double base expansion  /  193 M (=22DBL+1TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0xff, 0x12, 0x41, 0x01, 0x52, 0x0f, 0x72, 0x06,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3  /  PRAC  /  73 M (=5DBL+0TPL+8ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=676 */

/* B1=702 computed with 29 blocks, cost=7782M */
static const uint8_t _B1_702_bc[] = {
    0x03,
    /* 331*151*31*11*7*3*3  /  double-base chain  /  219 M (=30DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1e,
    /* 593*269*157*101*53*23*23  /  double-base chain  /  339 M (=46DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x07, 0x61, 0x27,
    /* 673*257*97  /  double-base chain  /  177 M (=24DBL+0TPL+1ADD+1M) */
    0x11, 0x61, 0x18,
    /* 337*227*127*73*67*17*7*7  /  double-base chain  /  335 M (=42DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x12, 0x71, 0x18,
    /* 211*107*19*11  /  double-base chain  /  166 M (=19DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x13,
    /* 599*509*283*281*239*61*43  /  double-base chain  /  404 M (=49DBL+3TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x28, 0xd1, 0x01, 0x04, 0xe1, 0x01, 0x05,
    /* 601*317*271*229*199*163*89*19  /  double-base chain  /  449 M (=56DBL+2TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x12, 0xd1, 0x01, 0x03, 0x41, 0x1a, 0x61, 0x09,
    /* 433*349*313*83  /  double-base chain  /  242 M (=27DBL+3TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x02, 0xf1, 0x02, 0x19,
    /* 659*617*547*379*307*251*13  /  double-base chain  /  428 M (=53DBL+2TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0x51, 0x0b, 0x51, 0x1e, 0xf1, 0x01, 0x09,
    /* 491*179*173*149*59*13  /  double-base chain  /  311 M (=34DBL+4TPL+3ADD+1M) */
    0x11, 0x41, 0x02, 0xd1, 0x01, 0x06, 0xf1, 0x03, 0x1a,
    /* 241*193*191*17  /  double-base chain  /  209 M (=24DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x09, 0x71, 0x0f,
    /* 647*457*383  /  double-base chain  /  207 M (=22DBL+3TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x0f, 0xe1, 0x02, 0x07,
    /* 691*653*367*359*79  /  double-base chain  /  326 M (=31DBL+7TPL+3ADD+1M) */
    0x11, 0xc1, 0x02, 0x12, 0xc1, 0x04, 0x05, 0xe1, 0x01, 0x08,
    /* 443*223*167*139  /  double-base chain  /  241 M (=20DBL+7TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x0e, 0xe1, 0x06, 0x06,
    /* 677*557*503*409*293  /  double-base chain  /  347 M (=38DBL+4TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x04, 0xc1, 0x01, 0x07, 0xd1, 0x01, 0x1a, 0xe1, 0x01, 0x01,
    /* 661*643*631*607*499*421  /  double-base chain  /  430 M (=47DBL+5TPL+5ADD+1M) */
    0x11, 0xd1, 0x02, 0x0e, 0x51, 0x0d, 0x41, 0x0a, 0xc1, 0x01, 0x07, 0xe1, 0x02, 0x03,
    /* 683*571*523*463*181*113  /  double-base chain  /  399 M (=46DBL+3TPL+5ADD+1M) */
    0x11, 0x41, 0x06, 0x41, 0x04, 0xc1, 0x01, 0x06, 0x51, 0x0d, 0xe1, 0x02, 0x11,
    /* 701*577*449*277*131  /  double-base chain  /  340 M (=41DBL+1TPL+5ADD+1M) */
    0x11, 0x51, 0x0a, 0xd1, 0x01, 0x02, 0x51, 0x08, 0x41, 0x14, 0x61, 0x01,
    /* 641*311*263  /  double-base chain  /  205 M (=24DBL+1TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0x41, 0x0c, 0x61, 0x09,
    /* 479*397*347  /  double-base chain  /  208 M (=21DBL+3TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x01, 0x51, 0x07, 0xe1, 0x02, 0x0d,
    /* 569*521  /  double-base chain  /  146 M (=15DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x06, 0xe1, 0x01, 0x09,
    /* 563*541*467*419*373*197*137*47*37*29  /  double base expansion  /  557 M (=62DBL+8TPL+3ADD+3M) */
    0x21, 0xa2, 0x08, 0xff, 0x12, 0x51, 0x1a, 0x52, 0x04, 0x62, 0x20,
    /* 587*461*439*389*109*71  /  double base expansion  /  369 M (=42DBL+4TPL+3ADD+3M) */
    0x21, 0xa2, 0x04, 0xff, 0x12, 0x42, 0x08, 0x41, 0x12, 0x72, 0x10,
    /* 619*613*487*353  /  double base expansion  /  283 M (=28DBL+5TPL+3ADD+3M) */
    0x21, 0xa2, 0x05, 0xff, 0x12, 0x41, 0x08, 0x42, 0x0a, 0x61, 0x0a,
    /* 431*401*41  /  double base expansion  /  181 M (=18DBL+3TPL+2ADD+3M) */
    0x21, 0xa2, 0x02, 0x80, 0x01, 0xff, 0x10, 0x41, 0x05, 0x72, 0x0d,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*5*3*3*3  /  PRAC  /  101 M (=7DBL+0TPL+11ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66,
      /* 233  /  PRAC  /  65 M (=1DBL+0TPL+10ADD+0M) */
      0x69, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x66,
      /* 103  /  PRAC  /  57 M (=3DBL+0TPL+7ADD+0M) */
      0x69, 0x02, 0x0b, 0x02, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=702 */

/* B1=729 computed with 30 blocks, cost=8009M */
static const uint8_t _B1_729_bc[] = {
    0x03,
    /* 673*257*241*97*17*13*7*5*3*3  /  double-base chain  /  345 M (=48DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x30,
    /* 331*151*31*11*7*3*3  /  double-base chain  /  219 M (=30DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1e,
    /* 593*269*157*101*53*23*23  /  double-base chain  /  339 M (=46DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x07, 0x61, 0x27,
    /* 439*227*83*73*67*37*17*7  /  double-base chain  /  352 M (=41DBL+4TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x15, 0xf1, 0x02, 0x14,
    /* 211*107*19*11  /  double-base chain  /  166 M (=19DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x13,
    /* 599*509*283*281*239*61*43  /  double-base chain  /  404 M (=49DBL+3TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x28, 0xd1, 0x01, 0x04, 0xe1, 0x01, 0x05,
    /* 499*467*421*197  /  double-base chain  /  258 M (=31DBL+2TPL+2ADD+1M) */
    0x11, 0x51, 0x10, 0xe1, 0x02, 0x0f,
    /* 337*317*271*223*179*137  /  double-base chain  /  357 M (=44DBL+2TPL+3ADD+1M) */
    0x11, 0x51, 0x0e, 0xc1, 0x01, 0x03, 0xf1, 0x01, 0x1b,
    /* 479*443*313*293*113  /  double-base chain  /  312 M (=41DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x15, 0x41, 0x03, 0x61, 0x11,
    /* 199*19*13  /  double-base chain  /  119 M (=14DBL+1TPL+1ADD+1M) */
    0x11, 0xe1, 0x01, 0x0e,
    /* 661*617*409*233*139*127  /  double-base chain  /  379 M (=46DBL+2TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x02, 0xd1, 0x01, 0x12, 0x41, 0x12, 0x61, 0x08,
    /* 709*607*457*367*79*59  /  double-base chain  /  372 M (=45DBL+2TPL+4ADD+1M) */
    0x11, 0x41, 0x04, 0x51, 0x0a, 0xd1, 0x02, 0x08, 0x61, 0x17,
    /* 193*191  /  double-base chain  /  117 M (=12DBL+2TPL+1ADD+1M) */
    0x11, 0xf1, 0x02, 0x0c,
    /* 727*659*577*433*349*307  /  double-base chain  /  416 M (=45DBL+5TPL+5ADD+1M) */
    0x11, 0x41, 0x01, 0x51, 0x1e, 0xc1, 0x01, 0x08, 0x41, 0x04, 0xf1, 0x04, 0x02,
    /* 647*523*251  /  double-base chain  /  205 M (=20DBL+4TPL+2ADD+1M) */
    0x11, 0xd1, 0x04, 0x0a, 0x71, 0x0a,
    /* 701*643*131*109  /  double-base chain  /  254 M (=31DBL+1TPL+3ADD+1M) */
    0x11, 0x51, 0x0a, 0x51, 0x0f, 0xe1, 0x01, 0x06,
    /* 683*619*503*229*89  /  double-base chain  /  328 M (=37DBL+3TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x01, 0x41, 0x07, 0x41, 0x1b, 0xf1, 0x02, 0x02,
    /* 691*587*487*461*163  /  double-base chain  /  342 M (=39DBL+3TPL+4ADD+1M) */
    0x11, 0xc1, 0x02, 0x14, 0x51, 0x05, 0x51, 0x08, 0xe1, 0x01, 0x06,
    /* 557*277*181*173  /  double-base chain  /  252 M (=29DBL+2TPL+3ADD+1M) */
    0x11, 0x51, 0x0d, 0xc1, 0x01, 0x06, 0xe1, 0x01, 0x0a,
    /* 653*491*149  /  double-base chain  /  201 M (=16DBL+6TPL+2ADD+1M) */
    0x11, 0x51, 0x0e, 0xf1, 0x06, 0x02,
    /* 401*383*263*71  /  double-base chain  /  248 M (=25DBL+4TPL+3ADD+1M) */
    0x11, 0xc1, 0x02, 0x01, 0xd1, 0x02, 0x04, 0x71, 0x14,
    /* 613*571*547*463*397  /  double-base chain  /  364 M (=45DBL+0TPL+6ADD+1M) */
    0x11, 0x41, 0x0c, 0x51, 0x08, 0x41, 0x0c, 0x51, 0x03, 0x41, 0x05, 0x71, 0x05,
    /* 719*641*311  /  double-base chain  /  221 M (=16DBL+7TPL+3ADD+1M) */
    0x11, 0xc1, 0x06, 0x05, 0xd1, 0x01, 0x08, 0x61, 0x03,
    /* 677*569*379*373*359*41  /  double base expansion  /  371 M (=40DBL+6TPL+2ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x03, 0xff, 0x10, 0x51, 0x0d, 0x72, 0x1b,
    /* 563*541*419*47*29  /  double base expansion  /  284 M (=31DBL+4TPL+2ADD+3M) */
    0x21, 0xa2, 0x04, 0xff, 0x12, 0x41, 0x0d, 0x72, 0x12,
    /* 631*601*521*431*347  /  double base expansion  /  343 M (=40DBL+3TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0x80, 0x02, 0xff, 0x10, 0x51, 0x03, 0x41, 0x1b, 0x62, 0x0a,
    /* 449*353*167*103  /  double base expansion  /  252 M (=25DBL+4TPL+3ADD+5M) */
    0x21, 0xa2, 0x02, 0xa3, 0x02, 0xff, 0x13, 0x41, 0x02, 0x42, 0x0d, 0x63, 0x0a,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3  /  PRAC  /  73 M (=5DBL+0TPL+8ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66,
      /* 389  /  PRAC  /  75 M (=3DBL+0TPL+10ADD+0M) */
      0x69, 0x03, 0x0b, 0x02, 0x0b, 0x0b, 0x0b, 0x03, 0x0b, 0x02, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=729 */

/* B1=756 computed with 31 blocks, cost=8298M */
static const uint8_t _B1_756_bc[] = {
    0x03,
    /* 673*257*241*97*17*13*7*5*3*3  /  double-base chain  /  345 M (=48DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x30,
    /* 331*151*31*11*7*3*3  /  double-base chain  /  219 M (=30DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1e,
    /* 593*269*157*101*53*23*23  /  double-base chain  /  339 M (=46DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x07, 0x61, 0x27,
    /* 439*227*83*73*67*37*17*7  /  double-base chain  /  352 M (=41DBL+4TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x15, 0xf1, 0x02, 0x14,
    /* 739*523*283*263*43  /  double-base chain  /  300 M (=37DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x0f, 0xf1, 0x01, 0x16,
    /* 211*107*19*11  /  double-base chain  /  166 M (=19DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x13,
    /* 499*467*421*197  /  double-base chain  /  258 M (=31DBL+2TPL+2ADD+1M) */
    0x11, 0x51, 0x10, 0xe1, 0x02, 0x0f,
    /* 337*317*271*223*179*137  /  double-base chain  /  357 M (=44DBL+2TPL+3ADD+1M) */
    0x11, 0x51, 0x0e, 0xc1, 0x01, 0x03, 0xf1, 0x01, 0x1b,
    /* 613*601*449*389*307*281*61  /  double-base chain  /  442 M (=55DBL+2TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0x41, 0x04, 0x41, 0x19, 0xf1, 0x01, 0x17,
    /* 599*229*103*19  /  double-base chain  /  213 M (=28DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x0f, 0x71, 0x0d,
    /* 479*443*313*293*113  /  double-base chain  /  312 M (=41DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x15, 0x41, 0x03, 0x61, 0x11,
    /* 751*463*193  /  double-base chain  /  199 M (=26DBL+0TPL+2ADD+1M) */
    0x11, 0x51, 0x12, 0x61, 0x08,
    /* 571*191*71*13  /  double-base chain  /  204 M (=25DBL+1TPL+2ADD+1M) */
    0x11, 0x41, 0x18, 0xe1, 0x01, 0x01,
    /* 661*617*409*233*139*127  /  double-base chain  /  379 M (=46DBL+2TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x02, 0xd1, 0x01, 0x12, 0x41, 0x12, 0x61, 0x08,
    /* 719*461*347*251*239*181*89  /  double-base chain  /  437 M (=48DBL+5TPL+5ADD+1M) */
    0x11, 0x41, 0x01, 0x41, 0x02, 0x41, 0x13, 0xc1, 0x04, 0x08, 0xe1, 0x01, 0x12,
    /* 641*503*487*367*163  /  double-base chain  /  333 M (=32DBL+7TPL+3ADD+1M) */
    0x11, 0xc1, 0x04, 0x19, 0xc1, 0x02, 0x05, 0xe1, 0x01, 0x02,
    /* 733*607*577*149  /  double-base chain  /  273 M (=32DBL+2TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x05, 0x41, 0x14, 0xf1, 0x01, 0x07,
    /* 653*647*521*491*311*277*59  /  double-base chain  /  458 M (=51DBL+5TPL+5ADD+1M) */
    0x11, 0x41, 0x08, 0xd1, 0x02, 0x09, 0x41, 0x07, 0xc1, 0x01, 0x01, 0xe1, 0x02, 0x1a,
    /* 701*643*131*109  /  double-base chain  /  254 M (=31DBL+1TPL+3ADD+1M) */
    0x11, 0x51, 0x0a, 0x51, 0x0f, 0xe1, 0x01, 0x06,
    /* 727*619*557*401*167  /  double-base chain  /  345 M (=36DBL+5TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x06, 0x51, 0x0b, 0xd1, 0x02, 0x09, 0xf1, 0x02, 0x0a,
    /* 743*659*431*383*349  /  double-base chain  /  356 M (=33DBL+7TPL+5ADD+1M) */
    0x11, 0x41, 0x01, 0xc1, 0x04, 0x02, 0xd1, 0x02, 0x06, 0x41, 0x12, 0xe1, 0x01, 0x06,
    /* 587*547*353  /  double-base chain  /  215 M (=22DBL+3TPL+3ADD+1M) */
    0x11, 0xc1, 0x02, 0x07, 0x51, 0x0a, 0xe1, 0x01, 0x05,
    /* 709*683*509*397  /  double-base chain  /  302 M (=27DBL+6TPL+5ADD+1M) */
    0x11, 0xc1, 0x06, 0x04, 0x41, 0x06, 0x41, 0x08, 0x41, 0x02, 0x71, 0x07,
    /* 433  /  double-base chain  /  73 M (=4DBL+3TPL+1ADD+1M) */
    0x11, 0xe1, 0x03, 0x04,
    /* 677*569*379*373*359*41  /  double base expansion  /  371 M (=40DBL+6TPL+2ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x03, 0xff, 0x10, 0x51, 0x0d, 0x72, 0x1b,
    /* 563*541*419*47*29  /  double base expansion  /  284 M (=31DBL+4TPL+2ADD+3M) */
    0x21, 0xa2, 0x04, 0xff, 0x12, 0x41, 0x0d, 0x72, 0x12,
    /* 691*457*199*173  /  double base expansion  /  264 M (=27DBL+4TPL+3ADD+3M) */
    0x21, 0xa2, 0x02, 0x80, 0x02, 0xff, 0x10, 0x52, 0x0f, 0x51, 0x06, 0x62, 0x06,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3  /  PRAC  /  73 M (=5DBL+0TPL+8ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66,
      /* 79  /  PRAC  /  53 M (=1DBL+0TPL+8ADD+0M) */
      0x69, 0x0b, 0x03, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x66,
      /* 631  /  PRAC  /  81 M (=3DBL+0TPL+11ADD+0M) */
      0x69, 0x03, 0x0b, 0x0b, 0x0b, 0x02, 0x0b, 0x02, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=756 */

/* B1=783 computed with 31 blocks, cost=8594M */
static const uint8_t _B1_783_bc[] = {
    0x03,
    /* 587*367*349*263*107*89*41*7*3  /  double-base chain  /  419 M (=54DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x19, 0x61, 0x1d,
    /* 761*659*619*431*139*43*23*17*7  /  double-base chain  /  448 M (=53DBL+5TPL+2ADD+1M) */
    0x11, 0xd1, 0x04, 0x24, 0xf1, 0x01, 0x11,
    /* 673*257*97  /  double-base chain  /  177 M (=24DBL+0TPL+1ADD+1M) */
    0x11, 0x61, 0x18,
    /* 439*227*83*73*67*37*17*7  /  double-base chain  /  352 M (=41DBL+4TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x15, 0xf1, 0x02, 0x14,
    /* 503*449*113*59*53*31  /  double-base chain  /  307 M (=38DBL+2TPL+2ADD+1M) */
    0x11, 0x51, 0x21, 0xf1, 0x02, 0x05,
    /* 499*373*281*271*199*163*103*13  /  double-base chain  /  445 M (=48DBL+7TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x0d, 0xc1, 0x03, 0x15, 0xf1, 0x03, 0x0e,
    /* 631*521*479*157*47*11  /  double-base chain  /  331 M (=42DBL+1TPL+3ADD+1M) */
    0x11, 0x51, 0x05, 0x41, 0x16, 0xe1, 0x01, 0x0f,
    /* 751*347*313*229*151*71  /  double-base chain  /  363 M (=38DBL+6TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x09, 0xc1, 0x04, 0x11, 0xe1, 0x01, 0x0c,
    /* 757*317*251*233*167*19  /  double-base chain  /  347 M (=39DBL+4TPL+3ADD+2M) */
    0x11, 0x41, 0x1a, 0x81, 0x04, 0x71, 0x0d,
    /* 571*487*307*293*11  /  double-base chain  /  291 M (=38DBL+0TPL+3ADD+1M) */
    0x11, 0x41, 0x0a, 0x41, 0x10, 0x61, 0x0c,
    /* 743*509*173*137*23  /  double-base chain  /  289 M (=36DBL+1TPL+3ADD+1M) */
    0x11, 0x41, 0x1b, 0xc1, 0x01, 0x01, 0x61, 0x08,
    /* 739*653*443*409*131*127  /  double-base chain  /  389 M (=44DBL+4TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x04, 0xd1, 0x02, 0x16, 0xc1, 0x01, 0x0a, 0x61, 0x08,
    /* 709*13  /  double-base chain  /  103 M (=10DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x0a,
    /* 397*197*181  /  double-base chain  /  186 M (=19DBL+3TPL+2ADD+1M) */
    0x11, 0x41, 0x12, 0xf1, 0x03, 0x01,
    /* 701*683*641*601*577*241  /  double-base chain  /  428 M (=45DBL+6TPL+5ADD+1M) */
    0x11, 0x51, 0x0f, 0xd1, 0x03, 0x0a, 0xc1, 0x01, 0x08, 0x51, 0x09, 0xf1, 0x02, 0x03,
    /* 547*541*389*191*109  /  double-base chain  /  323 M (=38DBL+2TPL+4ADD+1M) */
    0x11, 0x51, 0x05, 0xd1, 0x01, 0x15, 0x51, 0x09, 0xe1, 0x01, 0x03,
    /* 773*677*557*463*61  /  double-base chain  /  338 M (=35DBL+5TPL+4ADD+1M) */
    0x11, 0xd1, 0x02, 0x03, 0x51, 0x07, 0xd1, 0x02, 0x14, 0xf1, 0x01, 0x05,
    /* 727*719*617  /  double-base chain  /  223 M (=14DBL+9TPL+2ADD+1M) */
    0x11, 0xc1, 0x06, 0x04, 0xe1, 0x03, 0x0a,
    /* 593*353*337  /  double-base chain  /  206 M (=15DBL+7TPL+2ADD+1M) */
    0x11, 0x51, 0x06, 0xe1, 0x07, 0x09,
    /* 569*491*19  /  double-base chain  /  177 M (=16DBL+4TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x0d, 0xe1, 0x03, 0x03,
    /* 769  /  double-base chain  /  77 M (=8DBL+1TPL+1ADD+1M) */
    0x11, 0xe1, 0x01, 0x08,
    /* 661*457*401*359  /  double-base chain  /  284 M (=29DBL+4TPL+4ADD+1M) */
    0x11, 0x41, 0x12, 0xd1, 0x01, 0x03, 0xd1, 0x02, 0x07, 0xe1, 0x01, 0x01,
    /* 643*613*563*331*193  /  double-base chain  /  354 M (=31DBL+8TPL+5ADD+1M) */
    0x11, 0xc1, 0x04, 0x01, 0xd1, 0x01, 0x07, 0x51, 0x04, 0xc1, 0x02, 0x01, 0xf1, 0x01, 0x12,
    /* 467*421*179*101*29  /  double base expansion  /  276 M (=35DBL+1TPL+2ADD+3M) */
    0x21, 0xa2, 0x01, 0xff, 0x12, 0x41, 0x13, 0x72, 0x10,
    /* 607*599*523*461*379*277*79  /  double base expansion  /  448 M (=53DBL+4TPL+3ADD+5M) */
    0x21, 0xa2, 0x02, 0xa3, 0x02, 0xff, 0x13, 0x52, 0x05, 0x41, 0x20, 0x73, 0x10,
    /* 691*283*239*223*211  /  double base expansion  /  312 M (=39DBL+1TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0x00, 0x21, 0xff, 0x10, 0x42, 0x0e, 0x62, 0x19,
    /* 647*383*269*149  /  double base expansion  /  253 M (=30DBL+2TPL+2ADD+3M) */
    0x21, 0xa2, 0x02, 0xff, 0x12, 0x41, 0x02, 0x62, 0x1c,
    /* 733*433*419*311  /  double base expansion  /  284 M (=21DBL+9TPL+3ADD+5M) */
    0x21, 0xa2, 0x03, 0xa3, 0x06, 0xff, 0x13, 0x52, 0x08, 0x43, 0x01, 0x61, 0x0c,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3*3*3  /  PRAC  /  95 M (=7DBL+0TPL+10ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66,
      /* 5*3  /  PRAC  /  28 M (=2DBL+0TPL+3ADD+0M) */
      0x69, 0x66, 0x69, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=783 */

/* B1=811 computed with 32 blocks, cost=8886M */
static const uint8_t _B1_811_bc[] = {
    0x03,
    /* 761*659*619*431*139*43*23*17*7  /  double-base chain  /  448 M (=53DBL+5TPL+2ADD+1M) */
    0x11, 0xd1, 0x04, 0x24, 0xf1, 0x01, 0x11,
    /* 673*257*97  /  double-base chain  /  177 M (=24DBL+0TPL+1ADD+1M) */
    0x11, 0x61, 0x18,
    /* 337*227*127*73*67*17*7*7  /  double-base chain  /  335 M (=42DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x12, 0x71, 0x18,
    /* 593*269*61*53*41*13  /  double-base chain  /  283 M (=38DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x17, 0x61, 0x0f,
    /* 739*439*367*179*173*107  /  double-base chain  /  362 M (=39DBL+6TPL+2ADD+1M) */
    0x11, 0x51, 0x06, 0xf1, 0x06, 0x21,
    /* 769*59*13  /  double-base chain  /  145 M (=16DBL+2TPL+1ADD+1M) */
    0x11, 0xf1, 0x02, 0x10,
    /* 751*733*349*151  /  double-base chain  /  263 M (=30DBL+3TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x09, 0xe1, 0x02, 0x15,
    /* 773*613*103*11  /  double-base chain  /  220 M (=29DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x1b, 0x61, 0x02,
    /* 601*317*271*229*199*163*89*19  /  double-base chain  /  449 M (=56DBL+2TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x12, 0xd1, 0x01, 0x03, 0x41, 0x1a, 0x61, 0x09,
    /* 479*443*313*293*113  /  double-base chain  /  312 M (=41DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x15, 0x41, 0x03, 0x61, 0x11,
    /* 719*397*281*149*23  /  double-base chain  /  291 M (=38DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x19, 0x51, 0x04, 0x61, 0x09,
    /* 757*587*569*307*167*157  /  double-base chain  /  390 M (=35DBL+10TPL+3ADD+1M) */
    0x11, 0xc1, 0x04, 0x02, 0xd1, 0x04, 0x13, 0xf1, 0x02, 0x0e,
    /* 503*353*191*101*83*31  /  double-base chain  /  330 M (=35DBL+5TPL+3ADD+1M) */
    0x11, 0xc1, 0x02, 0x01, 0x51, 0x21, 0xf1, 0x03, 0x01,
    /* 787*499*463*421*359*263*241*181  /  double-base chain  /  524 M (=57DBL+7TPL+5ADD+1M) */
    0x11, 0xc1, 0x03, 0x07, 0xd1, 0x03, 0x0b, 0x41, 0x1f, 0xc1, 0x01, 0x03, 0x71, 0x05,
    /* 647*457*383  /  double-base chain  /  207 M (=22DBL+3TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x0f, 0xe1, 0x02, 0x07,
    /* 743*653*491*487  /  double-base chain  /  285 M (=32DBL+3TPL+3ADD+1M) */
    0x11, 0xc1, 0x02, 0x08, 0x41, 0x09, 0xf1, 0x01, 0x0f,
    /* 643*571*347  /  double-base chain  /  210 M (=19DBL+5TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x11, 0xf1, 0x03, 0x02,
    /* 727*641*577*409*193  /  double-base chain  /  353 M (=36DBL+5TPL+5ADD+1M) */
    0x11, 0x41, 0x02, 0xc1, 0x01, 0x02, 0xc1, 0x01, 0x05, 0x51, 0x11, 0xf1, 0x03, 0x0a,
    /* 521*433*389*331  /  double-base chain  /  279 M (=30DBL+3TPL+4ADD+1M) */
    0x11, 0x41, 0x09, 0xd1, 0x03, 0x02, 0x41, 0x09, 0x71, 0x0a,
    /* 809*547*109  /  double-base chain  /  205 M (=24DBL+1TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x03, 0x41, 0x0c, 0x71, 0x09,
    /* 797*683*661*631*131  /  double-base chain  /  361 M (=32DBL+8TPL+5ADD+1M) */
    0x11, 0xc1, 0x02, 0x01, 0xd1, 0x01, 0x08, 0xd1, 0x04, 0x02, 0x41, 0x12, 0xf1, 0x01, 0x03,
    /* 701*617*509*401  /  double-base chain  /  295 M (=11DBL+16TPL+3ADD+2M) */
    0x11, 0x81, 0x06, 0xd1, 0x08, 0x02, 0xe1, 0x02, 0x09,
    /* 563*541*467*419*373*197*137*47*37*29  /  double base expansion  /  557 M (=62DBL+8TPL+3ADD+3M) */
    0x21, 0xa2, 0x08, 0xff, 0x12, 0x51, 0x1a, 0x52, 0x04, 0x62, 0x20,
    /* 607*599*523*461*379*277*79  /  double base expansion  /  448 M (=53DBL+4TPL+3ADD+5M) */
    0x21, 0xa2, 0x02, 0xa3, 0x02, 0xff, 0x13, 0x52, 0x05, 0x41, 0x20, 0x73, 0x10,
    /* 691*283*239*223*211  /  double base expansion  /  312 M (=39DBL+1TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0x00, 0x21, 0xff, 0x10, 0x42, 0x0e, 0x62, 0x19,
    /* 677*557*251*233*71  /  double base expansion  /  316 M (=31DBL+6TPL+3ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x03, 0xff, 0x10, 0x41, 0x03, 0x41, 0x14, 0x72, 0x08,
    /* 811*449*311  /  double base expansion  /  209 M (=22DBL+3TPL+2ADD+3M) */
    0x21, 0xa2, 0x01, 0x80, 0x02, 0xff, 0x10, 0x41, 0x0c, 0x72, 0x0a,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3*3*3*3  /  PRAC  /  106 M (=8DBL+0TPL+11ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66, 0x69, 0x66,
      /* 5*3  /  PRAC  /  28 M (=2DBL+0TPL+3ADD+0M) */
      0x69, 0x66, 0x69, 0x03, 0x66,
      /* 19*11  /  PRAC  /  63 M (=3DBL+0TPL+8ADD+0M) */
      0x69, 0x02, 0x03, 0x66, 0x69, 0x03, 0x0b, 0x0b, 0x03, 0x66,
      /* 709  /  PRAC  /  82 M (=2DBL+0TPL+12ADD+0M) */
      0x69, 0x02, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x03, 0x0b, 0x03, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=811 */

/* B1=840 computed with 31 blocks, cost=9256M */
static const uint8_t _B1_840_bc[] = {
    0x03,
    /* 673*257*241*97*17*13*7*5*3*3  /  double-base chain  /  345 M (=48DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x30,
    /* 821*641*557*179*139*107*83*59*29  /  double-base chain  /  484 M (=65DBL+1TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x08, 0x71, 0x39,
    /* 331*151*31*11*7*3*3  /  double-base chain  /  219 M (=30DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1e,
    /* 593*269*157*101*53*23*23  /  double-base chain  /  339 M (=46DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x07, 0x61, 0x27,
    /* 769*103*43*19*7  /  double-base chain  /  213 M (=24DBL+3TPL+1ADD+1M) */
    0x11, 0xe1, 0x03, 0x18,
    /* 227*73*67*17  /  double-base chain  /  180 M (=21DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x15,
    /* 811*461*263*167*127*109*89*61*47  /  double-base chain  /  492 M (=53DBL+8TPL+3ADD+1M) */
    0x11, 0xd1, 0x03, 0x01, 0xd1, 0x03, 0x28, 0xf1, 0x02, 0x0c,
    /* 499*467*421*197  /  double-base chain  /  258 M (=31DBL+2TPL+2ADD+1M) */
    0x11, 0x51, 0x10, 0xe1, 0x02, 0x0f,
    /* 839*587*571*293*19  /  double-base chain  /  306 M (=31DBL+6TPL+2ADD+1M) */
    0x11, 0xd1, 0x06, 0x12, 0x61, 0x0d,
    /* 787*683*631*541*349*317*283*191*181*13  /  double-base chain  /  615 M (=70DBL+7TPL+5ADD+1M) */
    0x11, 0x51, 0x2b, 0xd1, 0x04, 0x04, 0x41, 0x05, 0xc1, 0x01, 0x0a, 0xf1, 0x02, 0x08,
    /* 719*653*313*311*79*37  /  double-base chain  /  358 M (=39DBL+5TPL+3ADD+1M) */
    0x11, 0xd1, 0x03, 0x0f, 0x51, 0x0e, 0xf1, 0x02, 0x0a,
    /* 751*463*193  /  double-base chain  /  199 M (=26DBL+0TPL+2ADD+1M) */
    0x11, 0x51, 0x12, 0x61, 0x08,
    /* 607*491*487*431*389*277*173*131*11  /  double-base chain  /  540 M (=61DBL+6TPL+5ADD+1M) */
    0x11, 0xd1, 0x01, 0x0a, 0x41, 0x1a, 0xc1, 0x02, 0x06, 0xc1, 0x02, 0x0c, 0xe1, 0x01, 0x07,
    /* 727*643*563*449*229*211  /  double-base chain  /  403 M (=46DBL+4TPL+4ADD+1M) */
    0x11, 0xc1, 0x02, 0x06, 0x51, 0x0d, 0x41, 0x11, 0xe1, 0x02, 0x0a,
    /* 709*691*577*521*479*401*137  /  double-base chain  /  476 M (=57DBL+3TPL+5ADD+1M) */
    0x11, 0x51, 0x08, 0xd1, 0x01, 0x04, 0xc1, 0x01, 0x09, 0x51, 0x0e, 0xe1, 0x01, 0x16,
    /* 647*457*383  /  double-base chain  /  207 M (=22DBL+3TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x0f, 0xe1, 0x02, 0x07,
    /* 367*113  /  double-base chain  /  120 M (=9DBL+4TPL+1ADD+1M) */
    0x11, 0xf1, 0x04, 0x09,
    /* 823*443*419*239*233*199*71  /  double-base chain  /  445 M (=44DBL+8TPL+5ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0x51, 0x07, 0xd1, 0x01, 0x0a, 0xc1, 0x06, 0x12, 0x61, 0x06,
    /* 547*523*307*149  /  double-base chain  /  264 M (=13DBL+13TPL+2ADD+1M) */
    0x11, 0x41, 0x09, 0xf1, 0x0d, 0x04,
    /* 761*661*599*163  /  double-base chain  /  279 M (=26DBL+6TPL+3ADD+1M) */
    0x11, 0x41, 0x08, 0xd1, 0x03, 0x0b, 0xe1, 0x03, 0x07,
    /* 797*773*739*701*617*439  /  double-base chain  /  443 M (=42DBL+9TPL+5ADD+1M) */
    0x11, 0xd1, 0x01, 0x08, 0x51, 0x04, 0xc1, 0x01, 0x07, 0xd1, 0x06, 0x14, 0xe1, 0x01, 0x03,
    /* 619*613*601*223  /  double-base chain  /  284 M (=29DBL+4TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x01, 0x41, 0x06, 0x41, 0x04, 0xe1, 0x03, 0x12,
    /* 757*509*503*337  /  double-base chain  /  289 M (=28DBL+5TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x08, 0x41, 0x0b, 0xc1, 0x03, 0x08, 0xe1, 0x01, 0x01,
    /* 809*281  /  double-base chain  /  144 M (=13DBL+3TPL+2ADD+1M) */
    0x11, 0xc1, 0x02, 0x02, 0xe1, 0x01, 0x0b,
    /* 659*433*251  /  double-base chain  /  214 M (=15DBL+7TPL+3ADD+1M) */
    0x11, 0xd1, 0x03, 0x06, 0xd1, 0x03, 0x05, 0xe1, 0x01, 0x04,
    /* 677*569*379*373*359*41  /  double base expansion  /  371 M (=40DBL+6TPL+2ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x03, 0xff, 0x10, 0x51, 0x0d, 0x72, 0x1b,
    /* 827*743*733*409  /  double base expansion  /  301 M (=20DBL+11TPL+3ADD+5M) */
    0x21, 0xa2, 0x08, 0xa3, 0x03, 0xff, 0x13, 0x52, 0x02, 0x43, 0x08, 0x61, 0x0a,
    /* 829*353*347*271  /  double base expansion  /  279 M (=22DBL+8TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x07, 0xff, 0x13, 0x51, 0x05, 0x42, 0x08, 0x63, 0x09,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3  /  PRAC  /  73 M (=5DBL+0TPL+8ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66,
      /* 397  /  PRAC  /  75 M (=3DBL+0TPL+10ADD+0M) */
      0x69, 0x02, 0x0b, 0x0b, 0x0b, 0x02, 0x0b, 0x03, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=840 */

/* B1=869 computed with 33 blocks, cost=9578M */
static const uint8_t _B1_869_bc[] = {
    0x03,
    /* 673*257*241*97*17*13*7*5*3*3  /  double-base chain  /  345 M (=48DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x30,
    /* 821*641*557*179*139*107*83*59*29  /  double-base chain  /  484 M (=65DBL+1TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x08, 0x71, 0x39,
    /* 331*151*31*11*7*3*3  /  double-base chain  /  219 M (=30DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1e,
    /* 593*269*157*101*53*23*23  /  double-base chain  /  339 M (=46DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x07, 0x61, 0x27,
    /* 769*103*43*19*7  /  double-base chain  /  213 M (=24DBL+3TPL+1ADD+1M) */
    0x11, 0xe1, 0x03, 0x18,
    /* 227*73*67*17  /  double-base chain  /  180 M (=21DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x15,
    /* 443*409*353*211*163*127*113*13  /  double-base chain  /  440 M (=49DBL+6TPL+3ADD+1M) */
    0x11, 0xc1, 0x05, 0x17, 0xd1, 0x01, 0x0d, 0x61, 0x0d,
    /* 839*587*571*293*19  /  double-base chain  /  306 M (=31DBL+6TPL+2ADD+1M) */
    0x11, 0xd1, 0x06, 0x12, 0x61, 0x0d,
    /* 613*601*449*389*307*281*61  /  double-base chain  /  442 M (=55DBL+2TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0x41, 0x04, 0x41, 0x19, 0xf1, 0x01, 0x17,
    /* 857*829*797  /  double-base chain  /  221 M (=24DBL+3TPL+2ADD+1M) */
    0x11, 0x41, 0x02, 0xe1, 0x03, 0x16,
    /* 863*647*433*383*311*167  /  double-base chain  /  396 M (=41DBL+7TPL+3ADD+1M) */
    0x11, 0x41, 0x1c, 0x41, 0x0a, 0xf1, 0x07, 0x03,
    /* 773*653*317*313*271*263*11  /  double-base chain  /  421 M (=52DBL+2TPL+4ADD+1M) */
    0x11, 0x51, 0x05, 0xd1, 0x02, 0x1f, 0x51, 0x09, 0x71, 0x07,
    /* 439*431*367*191*173*131  /  double-base chain  /  368 M (=37DBL+7TPL+3ADD+1M) */
    0x11, 0xd1, 0x03, 0x17, 0x51, 0x0d, 0xe1, 0x04, 0x01,
    /* 751*463*193  /  double-base chain  /  199 M (=26DBL+0TPL+2ADD+1M) */
    0x11, 0x51, 0x12, 0x61, 0x08,
    /* 709*503*283  /  double-base chain  /  204 M (=25DBL+1TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x07, 0x61, 0x12,
    /* 823*809*701*499*239  /  double-base chain  /  354 M (=39DBL+4TPL+4ADD+1M) */
    0x11, 0x41, 0x02, 0x51, 0x15, 0xd1, 0x01, 0x0d, 0xf1, 0x03, 0x03,
    /* 733*337*229  /  double-base chain  /  200 M (=21DBL+3TPL+2ADD+1M) */
    0x11, 0x51, 0x0a, 0xe1, 0x03, 0x0b,
    /* 727*719*617  /  double-base chain  /  223 M (=14DBL+9TPL+2ADD+1M) */
    0x11, 0xc1, 0x06, 0x04, 0xe1, 0x03, 0x0a,
    /* 487*397*233*181  /  double-base chain  /  260 M (=25DBL+5TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x10, 0xc1, 0x02, 0x05, 0xf1, 0x02, 0x04,
    /* 743*631*347*223*109*89*41  /  double-base chain  /  424 M (=41DBL+8TPL+5ADD+1M) */
    0x11, 0x41, 0x0d, 0xc1, 0x03, 0x0b, 0xd1, 0x03, 0x01, 0xd1, 0x01, 0x08, 0xe1, 0x01, 0x08,
    /* 859*787*577  /  double-base chain  /  226 M (=27DBL+1TPL+3ADD+1M) */
    0x11, 0x51, 0x05, 0x41, 0x0e, 0xe1, 0x01, 0x08,
    /* 811*547*457*359  /  double-base chain  /  286 M (=31DBL+3TPL+4ADD+1M) */
    0x11, 0x41, 0x02, 0xc1, 0x01, 0x04, 0xc1, 0x01, 0x06, 0xf1, 0x01, 0x13,
    /* 659*619*401  /  double-base chain  /  217 M (=24DBL+2TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x02, 0x51, 0x0d, 0xe1, 0x01, 0x09,
    /* 853*757*691*643*199*71  /  double-base chain  /  413 M (=36DBL+10TPL+5ADD+1M) */
    0x11, 0xd1, 0x05, 0x02, 0x41, 0x19, 0x51, 0x06, 0xd1, 0x04, 0x02, 0xf1, 0x01, 0x01,
    /* 827*521*479*421  /  double-base chain  /  291 M (=30DBL+4TPL+4ADD+1M) */
    0x11, 0x51, 0x0a, 0xc1, 0x01, 0x09, 0xd1, 0x03, 0x06, 0x61, 0x05,
    /* 563*541*467*419*373*197*137*47*37*29  /  double base expansion  /  557 M (=62DBL+8TPL+3ADD+3M) */
    0x21, 0xa2, 0x08, 0xff, 0x12, 0x51, 0x1a, 0x52, 0x04, 0x62, 0x20,
    /* 607*599*523*461*379*277*79  /  double base expansion  /  448 M (=53DBL+4TPL+3ADD+5M) */
    0x21, 0xa2, 0x02, 0xa3, 0x02, 0xff, 0x13, 0x52, 0x05, 0x41, 0x20, 0x73, 0x10,
    /* 739*509*491*149  /  double base expansion  /  269 M (=22DBL+8TPL+2ADD+3M) */
    0x21, 0xa2, 0x08, 0xff, 0x12, 0x51, 0x0a, 0x62, 0x0c,
    /* 761*683*349  /  double base expansion  /  221 M (=10DBL+11TPL+2ADD+3M) */
    0x21, 0xa2, 0x06, 0x80, 0x05, 0xff, 0x10, 0x51, 0x01, 0x72, 0x09,
    /* 677*661*569  /  double base expansion  /  229 M (=20DBL+5TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x01, 0x80, 0x03, 0xff, 0x10, 0x52, 0x04, 0x43, 0x05, 0x61, 0x0b,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3  /  PRAC  /  73 M (=5DBL+0TPL+8ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66,
      /* 251  /  PRAC  /  69 M (=3DBL+0TPL+9ADD+0M) */
      0x69, 0x02, 0x03, 0x0b, 0x02, 0x0b, 0x0b, 0x0b, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=869 */

/* B1=898 computed with 33 blocks, cost=9852M */
static const uint8_t _B1_898_bc[] = {
    0x03,
    /* 821*641*557*179*139*107*83*59*29  /  double-base chain  /  484 M (=65DBL+1TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x08, 0x71, 0x39,
    /* 593*269*157*101*53*23*23  /  double-base chain  /  339 M (=46DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x07, 0x61, 0x27,
    /* 673*257*97  /  double-base chain  /  177 M (=24DBL+0TPL+1ADD+1M) */
    0x11, 0x61, 0x18,
    /* 769*103*43*19*7  /  double-base chain  /  213 M (=24DBL+3TPL+1ADD+1M) */
    0x11, 0xe1, 0x03, 0x18,
    /* 337*227*127*73*67*17*7*7  /  double-base chain  /  335 M (=42DBL+2TPL+2ADD+1M) */
    0x11, 0xd1, 0x02, 0x12, 0x71, 0x18,
    /* 709*613*587*353*211*173*149*89*19*11  /  double-base chain  /  551 M (=46DBL+17TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x07, 0xc1, 0x04, 0x14, 0xe1, 0x0c, 0x13,
    /* 751*733*349*151  /  double-base chain  /  263 M (=30DBL+3TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x09, 0xe1, 0x02, 0x15,
    /* 863*787*653*461*397*79  /  double-base chain  /  398 M (=43DBL+6TPL+3ADD+1M) */
    0x11, 0xd1, 0x05, 0x0e, 0x41, 0x0e, 0xf1, 0x01, 0x0f,
    /* 857*829*797  /  double-base chain  /  221 M (=24DBL+3TPL+2ADD+1M) */
    0x11, 0x41, 0x02, 0xe1, 0x03, 0x16,
    /* 521*271*241*71  /  double-base chain  /  237 M (=28DBL+2TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x17, 0xe1, 0x01, 0x05,
    /* 479*443*313*293*113  /  double-base chain  /  312 M (=41DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x15, 0x41, 0x03, 0x61, 0x11,
    /* 659*617*547*379*307*251*13  /  double-base chain  /  428 M (=53DBL+2TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0x51, 0x0b, 0x51, 0x1e, 0xf1, 0x01, 0x09,
    /* 757*491*409*367*193*131*11  /  double-base chain  /  412 M (=49DBL+3TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x04, 0xd1, 0x01, 0x0d, 0xd1, 0x01, 0x1b, 0x61, 0x05,
    /* 487*317*163  /  double-base chain  /  190 M (=23DBL+1TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x0c, 0x61, 0x0b,
    /* 883*463*277  /  double-base chain  /  207 M (=22DBL+3TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x10, 0xe1, 0x02, 0x06,
    /* 647*457*383  /  double-base chain  /  207 M (=22DBL+3TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x0f, 0xe1, 0x02, 0x07,
    /* 877*839*311*283*191  /  double-base chain  /  337 M (=40DBL+2TPL+4ADD+1M) */
    0x11, 0x41, 0x02, 0x51, 0x0d, 0xc1, 0x02, 0x11, 0x61, 0x08,
    /* 823*809*701*499*239  /  double-base chain  /  354 M (=39DBL+4TPL+4ADD+1M) */
    0x11, 0x41, 0x02, 0x51, 0x15, 0xd1, 0x01, 0x0d, 0xf1, 0x03, 0x03,
    /* 811*691*569*389*359  /  double-base chain  /  354 M (=39DBL+4TPL+4ADD+1M) */
    0x11, 0xc1, 0x02, 0x11, 0x51, 0x0d, 0x51, 0x07, 0xf1, 0x02, 0x02,
    /* 677*281*233*109  /  double-base chain  /  252 M (=29DBL+2TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x0c, 0xc1, 0x01, 0x05, 0x61, 0x0c,
    /* 859*739*727*431*199  /  double-base chain  /  359 M (=42DBL+2TPL+5ADD+1M) */
    0x11, 0x41, 0x18, 0x41, 0x02, 0x51, 0x08, 0x51, 0x03, 0xf1, 0x02, 0x05,
    /* 607*401*347*263*229  /  double-base chain  /  337 M (=32DBL+6TPL+5ADD+1M) */
    0x11, 0x41, 0x01, 0x41, 0x02, 0xd1, 0x01, 0x07, 0x41, 0x0c, 0xf1, 0x05, 0x0a,
    /* 719*643*599*571  /  double-base chain  /  302 M (=23DBL+9TPL+4ADD+1M) */
    0x11, 0xd1, 0x01, 0x03, 0x51, 0x06, 0x41, 0x0b, 0xe1, 0x08, 0x03,
    /* 601*503*31  /  double-base chain  /  189 M (=20DBL+2TPL+3ADD+1M) */
    0x11, 0xd1, 0x02, 0x04, 0x51, 0x08, 0x61, 0x08,
    /* 577  /  double-base chain  /  75 M (=6DBL+2TPL+1ADD+1M) */
    0x11, 0xe1, 0x02, 0x06,
    /* 563*541*467*419*373*197*137*47*37*29  /  double base expansion  /  557 M (=62DBL+8TPL+3ADD+3M) */
    0x21, 0xa2, 0x08, 0xff, 0x12, 0x51, 0x1a, 0x52, 0x04, 0x62, 0x20,
    /* 853*773*743*523*509*331*223*17*13  /  double base expansion  /  534 M (=55DBL+10TPL+3ADD+5M) */
    0x21, 0xa2, 0x08, 0xa3, 0x02, 0xff, 0x13, 0x52, 0x11, 0x43, 0x1d, 0x61, 0x09,
    /* 887*761*683*631*433*181  /  double base expansion  /  411 M (=48DBL+4TPL+3ADD+3M) */
    0x21, 0xa2, 0x04, 0xff, 0x12, 0x51, 0x26, 0x42, 0x01, 0x72, 0x09,
    /* 881*827*439*167*61*41  /  double base expansion  /  360 M (=39DBL+5TPL+3ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x02, 0xff, 0x10, 0x51, 0x13, 0x51, 0x12, 0x62, 0x02,
    /* 661*619*449*421  /  double base expansion  /  282 M (=33DBL+2TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0x80, 0x01, 0xff, 0x10, 0x41, 0x08, 0x52, 0x0b, 0x62, 0x0e,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3*3*3*3  /  PRAC  /  106 M (=8DBL+0TPL+11ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66, 0x69, 0x66,
      /* 5*3  /  PRAC  /  28 M (=2DBL+0TPL+3ADD+0M) */
      0x69, 0x66, 0x69, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=898 */

/* B1=928 computed with 31 blocks, cost=10095M */
static const uint8_t _B1_928_bc[] = {
    0x03,
    /* 673*257*241*97*17*13*7*5*3*3  /  double-base chain  /  345 M (=48DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x30,
    /* 821*641*557*179*139*107*83*59*29  /  double-base chain  /  484 M (=65DBL+1TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x08, 0x71, 0x39,
    /* 331*151*31*11*7*3*3  /  double-base chain  /  219 M (=30DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1e,
    /* 593*269*157*101*53*23*23  /  double-base chain  /  339 M (=46DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x07, 0x61, 0x27,
    /* 769*103*43*19*7  /  double-base chain  /  213 M (=24DBL+3TPL+1ADD+1M) */
    0x11, 0xe1, 0x03, 0x18,
    /* 907*383*227*163*73*67*17  /  double-base chain  /  371 M (=42DBL+5TPL+2ADD+1M) */
    0x11, 0xc1, 0x03, 0x14, 0xf1, 0x02, 0x16,
    /* 709*613*587*353*211*173*149*89*19*11  /  double-base chain  /  551 M (=46DBL+17TPL+3ADD+1M) */
    0x11, 0xc1, 0x01, 0x07, 0xc1, 0x04, 0x14, 0xe1, 0x0c, 0x13,
    /* 857*829*797  /  double-base chain  /  221 M (=24DBL+3TPL+2ADD+1M) */
    0x11, 0x41, 0x02, 0xe1, 0x03, 0x16,
    /* 479*443*313*293*113  /  double-base chain  /  312 M (=41DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x15, 0x41, 0x03, 0x61, 0x11,
    /* 751*743*659*619*317*307*167*71  /  double-base chain  /  518 M (=56DBL+7TPL+5ADD+2M) */
    0x11, 0x41, 0x01, 0x81, 0x01, 0xd1, 0x02, 0x12, 0xc1, 0x02, 0x02, 0xf1, 0x02, 0x23,
    /* 739*677*457*367*199  /  double-base chain  /  337 M (=36DBL+5TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x0d, 0x41, 0x0d, 0xf1, 0x04, 0x0a,
    /* 911*577*431*193*191  /  double-base chain  /  330 M (=35DBL+5TPL+3ADD+1M) */
    0x11, 0x41, 0x0c, 0xd1, 0x04, 0x0a, 0xf1, 0x01, 0x0d,
    /* 859*503*401*271*233*61  /  double-base chain  /  382 M (=43DBL+4TPL+4ADD+1M) */
    0x11, 0x51, 0x04, 0xd1, 0x02, 0x03, 0xc1, 0x01, 0x03, 0xf1, 0x01, 0x21,
    /* 733*337*229  /  double-base chain  /  200 M (=21DBL+3TPL+2ADD+1M) */
    0x11, 0x51, 0x0a, 0xe1, 0x03, 0x0b,
    /* 881*647*569*547*509*263  /  double-base chain  /  425 M (=48DBL+4TPL+5ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0x51, 0x10, 0x51, 0x11, 0xc1, 0x02, 0x05, 0xf1, 0x01, 0x07,
    /* 853*827*617*601*499*131  /  double-base chain  /  422 M (=44DBL+6TPL+5ADD+2M) */
    0x11, 0x81, 0x01, 0x51, 0x15, 0xd1, 0x01, 0x02, 0xd1, 0x03, 0x03, 0xf1, 0x01, 0x12,
    /* 773*719*701*571*521*389  /  double-base chain  /  436 M (=41DBL+9TPL+5ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0xd1, 0x06, 0x09, 0xc1, 0x02, 0x08, 0x41, 0x06, 0x61, 0x0f,
    /* 397*281*223*109  /  double-base chain  /  248 M (=25DBL+4TPL+3ADD+1M) */
    0x11, 0xd1, 0x03, 0x04, 0x51, 0x0c, 0xf1, 0x01, 0x09,
    /* 809*487  /  double-base chain  /  148 M (=17DBL+1TPL+2ADD+1M) */
    0x11, 0x41, 0x09, 0xf1, 0x01, 0x08,
    /* 757*349*127  /  double-base chain  /  200 M (=25DBL+0TPL+3ADD+1M) */
    0x11, 0x51, 0x0e, 0x41, 0x04, 0x71, 0x07,
    /* 839*823*661*643  /  double-base chain  /  306 M (=27DBL+7TPL+4ADD+1M) */
    0x11, 0xd1, 0x04, 0x06, 0x51, 0x07, 0xc1, 0x02, 0x06, 0xf1, 0x01, 0x08,
    /* 919*727*409*359  /  double-base chain  /  302 M (=27DBL+6TPL+5ADD+1M) */
    0x11, 0xc1, 0x01, 0x07, 0xc1, 0x03, 0x06, 0xc1, 0x01, 0x01, 0x41, 0x07, 0xf1, 0x01, 0x06,
    /* 787*653*439  /  double-base chain  /  230 M (=23DBL+3TPL+4ADD+1M) */
    0x11, 0x51, 0x08, 0xd1, 0x02, 0x07, 0xc1, 0x01, 0x04, 0x61, 0x04,
    /* 563*541*467*419*373*197*137*47*37*29  /  double base expansion  /  557 M (=62DBL+8TPL+3ADD+3M) */
    0x21, 0xa2, 0x08, 0xff, 0x12, 0x51, 0x1a, 0x52, 0x04, 0x62, 0x20,
    /* 607*599*523*461*379*277*79  /  double base expansion  /  448 M (=53DBL+4TPL+3ADD+5M) */
    0x21, 0xa2, 0x02, 0xa3, 0x02, 0xff, 0x13, 0x52, 0x05, 0x41, 0x20, 0x73, 0x10,
    /* 887*761*683*631*433*181  /  double base expansion  /  411 M (=48DBL+4TPL+3ADD+3M) */
    0x21, 0xa2, 0x04, 0xff, 0x12, 0x51, 0x26, 0x42, 0x01, 0x72, 0x09,
    /* 877*863*691*283*251*239*13  /  double base expansion  /  433 M (=44DBL+8TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x06, 0x80, 0x01, 0xff, 0x10, 0x51, 0x12, 0x53, 0x11, 0x62, 0x09,
    /* 883*491*463*421*347*41  /  double base expansion  /  384 M (=39DBL+7TPL+3ADD+3M) */
    0x21, 0xa2, 0x06, 0x80, 0x01, 0xff, 0x10, 0x51, 0x1a, 0x42, 0x04, 0x61, 0x09,
    /* 811*449*311  /  double base expansion  /  209 M (=22DBL+3TPL+2ADD+3M) */
    0x21, 0xa2, 0x01, 0x80, 0x02, 0xff, 0x10, 0x41, 0x0c, 0x72, 0x0a,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3  /  PRAC  /  73 M (=5DBL+0TPL+8ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=928 */

/* B1=959 computed with 32 blocks, cost=10489M */
static const uint8_t _B1_959_bc[] = {
    0x03,
    /* 673*257*241*97*17*13*7*5*3*3  /  double-base chain  /  345 M (=48DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x30,
    /* 821*641*557*179*139*107*83*59*29  /  double-base chain  /  484 M (=65DBL+1TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x08, 0x71, 0x39,
    /* 331*151*31*11*7*3*3  /  double-base chain  /  219 M (=30DBL+0TPL+1ADD+1M) */
    0x11, 0x71, 0x1e,
    /* 593*269*157*101*53*23*23  /  double-base chain  /  339 M (=46DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x07, 0x61, 0x27,
    /* 769*103*43*19*7  /  double-base chain  /  213 M (=24DBL+3TPL+1ADD+1M) */
    0x11, 0xe1, 0x03, 0x18,
    /* 907*383*227*163*73*67*17  /  double-base chain  /  371 M (=42DBL+5TPL+2ADD+1M) */
    0x11, 0xc1, 0x03, 0x14, 0xf1, 0x02, 0x16,
    /* 929*857*607*509*271*19  /  double-base chain  /  378 M (=47DBL+2TPL+3ADD+1M) */
    0x11, 0x51, 0x0e, 0x41, 0x08, 0xf1, 0x02, 0x19,
    /* 839*709*643*479*439*337*317*263*79*71*11  /  double-base chain  /  658 M (=71DBL+10TPL+5ADD+1M) */
    0x11, 0xd1, 0x05, 0x24, 0xd1, 0x02, 0x11, 0xc1, 0x02, 0x08, 0x41, 0x05, 0xe1, 0x01, 0x05,
    /* 613*601*449*389*307*281*61  /  double-base chain  /  442 M (=55DBL+2TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0x41, 0x04, 0x41, 0x19, 0xf1, 0x01, 0x17,
    /* 751*463*193  /  double-base chain  /  199 M (=26DBL+0TPL+2ADD+1M) */
    0x11, 0x51, 0x12, 0x61, 0x08,
    /* 739*677*457*367*199  /  double-base chain  /  337 M (=36DBL+5TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x0d, 0x41, 0x0d, 0xf1, 0x04, 0x0a,
    /* 797*757*743*619*577*167*149*89  /  double-base chain  /  527 M (=54DBL+9TPL+5ADD+1M) */
    0x11, 0xd1, 0x01, 0x0e, 0x41, 0x0e, 0x51, 0x0c, 0xd1, 0x06, 0x05, 0xf1, 0x02, 0x09,
    /* 947*809*431*421*409*401  /  double-base chain  /  420 M (=49DBL+3TPL+5ADD+1M) */
    0x11, 0x41, 0x01, 0xc1, 0x01, 0x10, 0x41, 0x0c, 0x51, 0x07, 0xe1, 0x02, 0x0d,
    /* 919*617*349*293  /  double-base chain  /  278 M (=31DBL+3TPL+3ADD+1M) */
    0x11, 0xc1, 0x02, 0x13, 0xc1, 0x01, 0x05, 0x71, 0x07,
    /* 859*827*773*719*131*127*41  /  double-base chain  /  451 M (=50DBL+5TPL+5ADD+1M) */
    0x11, 0x51, 0x06, 0x51, 0x0d, 0xc1, 0x01, 0x01, 0x51, 0x12, 0xf1, 0x04, 0x0c,
    /* 941*881*733*727*521*503  /  double-base chain  /  445 M (=44DBL+8TPL+5ADD+1M) */
    0x11, 0xc1, 0x04, 0x02, 0xd1, 0x02, 0x03, 0xd1, 0x01, 0x09, 0x41, 0x09, 0xe1, 0x01, 0x15,
    /* 911*829*787*571*311  /  double-base chain  /  368 M (=45DBL+1TPL+5ADD+1M) */
    0x11, 0x51, 0x0e, 0x51, 0x06, 0x51, 0x0b, 0x51, 0x0c, 0xe1, 0x01, 0x02,
    /* 653*647*587*487  /  double-base chain  /  293 M (=32DBL+3TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x03, 0x51, 0x08, 0x51, 0x0e, 0xf1, 0x02, 0x07,
    /* 877*659*397*313*229  /  double-base chain  /  353 M (=36DBL+5TPL+5ADD+1M) */
    0x11, 0x51, 0x06, 0x41, 0x05, 0x51, 0x05, 0xd1, 0x02, 0x0d, 0xf1, 0x03, 0x07,
    /* 379*173  /  double-base chain  /  129 M (=16DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x0b, 0x71, 0x05,
    /* 853*569*347*191  /  double-base chain  /  286 M (=19DBL+10TPL+4ADD+1M) */
    0x11, 0x41, 0x05, 0x41, 0x02, 0xc1, 0x0a, 0x04, 0x61, 0x08,
    /* 953*823  /  double-base chain  /  163 M (=18DBL+1TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x07, 0x51, 0x05, 0x71, 0x06,
    /* 563*541*467*419*373*197*137*47*37*29  /  double base expansion  /  557 M (=62DBL+8TPL+3ADD+3M) */
    0x21, 0xa2, 0x08, 0xff, 0x12, 0x51, 0x1a, 0x52, 0x04, 0x62, 0x20,
    /* 887*761*683*631*433*181  /  double base expansion  /  411 M (=48DBL+4TPL+3ADD+3M) */
    0x21, 0xa2, 0x04, 0xff, 0x12, 0x51, 0x26, 0x42, 0x01, 0x72, 0x09,
    /* 691*283*239*223*211  /  double base expansion  /  312 M (=39DBL+1TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0x00, 0x21, 0xff, 0x10, 0x42, 0x0e, 0x62, 0x19,
    /* 811*443*359*353*277*113  /  double base expansion  /  385 M (=44DBL+4TPL+3ADD+5M) */
    0x21, 0xa2, 0x02, 0xa3, 0x01, 0x80, 0x01, 0xff, 0x10, 0x42, 0x0a, 0x51, 0x0b, 0x63, 0x17,
    /* 701*547*499*461*233*13  /  double base expansion  /  367 M (=40DBL+5TPL+3ADD+3M) */
    0x21, 0xa2, 0x03, 0x80, 0x02, 0xff, 0x10, 0x52, 0x16, 0x51, 0x06, 0x72, 0x0c,
    /* 937*661*251*109  /  double base expansion  /  268 M (=29DBL+3TPL+3ADD+5M) */
    0x21, 0xa2, 0x01, 0xa3, 0x01, 0x80, 0x01, 0xff, 0x10, 0x43, 0x01, 0x41, 0x03, 0x62, 0x19,
    /* 883*863*523*491  /  double base expansion  /  297 M (=28DBL+6TPL+3ADD+5M) */
    0x21, 0xa2, 0x03, 0xa3, 0x01, 0x80, 0x02, 0xff, 0x10, 0x51, 0x05, 0x43, 0x08, 0x72, 0x0f,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*3*3  /  PRAC  /  73 M (=5DBL+0TPL+8ADD+0M) */
      0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66,
      /* 599  /  PRAC  /  80 M (=4DBL+0TPL+10ADD+0M) */
      0x69, 0x02, 0x0b, 0x0b, 0x0b, 0x02, 0x0b, 0x0b, 0x0b, 0x02, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=959 */

/* B1=990 computed with 34 blocks, cost=10840M */
static const uint8_t _B1_990_bc[] = {
    0x03,
    /* 821*641*557*179*139*107*83*59*29  /  double-base chain  /  484 M (=65DBL+1TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x08, 0x71, 0x39,
    /* 593*269*157*101*53*23*23  /  double-base chain  /  339 M (=46DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x07, 0x61, 0x27,
    /* 673*257*97  /  double-base chain  /  177 M (=24DBL+0TPL+1ADD+1M) */
    0x11, 0x61, 0x18,
    /* 769*103*43*19*7  /  double-base chain  /  213 M (=24DBL+3TPL+1ADD+1M) */
    0x11, 0xe1, 0x03, 0x18,
    /* 983*857*653*571*431*271*191*31*31  /  double-base chain  /  538 M (=63DBL+6TPL+3ADD+1M) */
    0x11, 0xc1, 0x04, 0x03, 0xd1, 0x01, 0x12, 0xf1, 0x01, 0x2a,
    /* 907*383*227*163*73*67*17  /  double-base chain  /  371 M (=42DBL+5TPL+2ADD+1M) */
    0x11, 0xc1, 0x03, 0x14, 0xf1, 0x02, 0x16,
    /* 691*613*263*239*233*131*19*7  /  double-base chain  /  422 M (=55DBL+1TPL+3ADD+1M) */
    0x11, 0x41, 0x19, 0x51, 0x06, 0xe1, 0x01, 0x18,
    /* 977*863*743*397*149*41*17*13*11  /  double-base chain  /  464 M (=49DBL+8TPL+3ADD+1M) */
    0x11, 0xd1, 0x03, 0x12, 0xd1, 0x04, 0x0f, 0xf1, 0x01, 0x10,
    /* 751*733*349*151  /  double-base chain  /  263 M (=30DBL+3TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x09, 0xe1, 0x02, 0x15,
    /* 953*941*919*421*317*127*113*89*13  /  double-base chain  /  536 M (=69DBL+1TPL+5ADD+1M) */
    0x11, 0x41, 0x05, 0x51, 0x1a, 0xd1, 0x01, 0x14, 0x51, 0x06, 0x61, 0x0c,
    /* 971*823*401*229  /  double-base chain  /  276 M (=25DBL+7TPL+2ADD+1M) */
    0x11, 0xc1, 0x03, 0x10, 0xe1, 0x04, 0x09,
    /* 739*677*457*367*199  /  double-base chain  /  337 M (=36DBL+5TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x0d, 0x41, 0x0d, 0xf1, 0x04, 0x0a,
    /* 709*503*283  /  double-base chain  /  204 M (=25DBL+1TPL+2ADD+1M) */
    0x11, 0xc1, 0x01, 0x07, 0x61, 0x12,
    /* 881*797*313*167*11  /  double-base chain  /  296 M (=37DBL+1TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x04, 0x41, 0x14, 0x61, 0x0d,
    /* 877*643*487*337*251*109  /  double-base chain  /  393 M (=48DBL+2TPL+4ADD+1M) */
    0x11, 0x51, 0x0b, 0xd1, 0x01, 0x07, 0x41, 0x06, 0xf1, 0x01, 0x18,
    /* 727*443*307*223*71  /  double-base chain  /  314 M (=31DBL+6TPL+3ADD+1M) */
    0x11, 0xd1, 0x01, 0x0d, 0xc1, 0x05, 0x05, 0x71, 0x0d,
    /* 827*787*479*241*211  /  double-base chain  /  341 M (=28DBL+10TPL+3ADD+1M) */
    0x11, 0xc1, 0x03, 0x08, 0xd1, 0x05, 0x12, 0xe1, 0x02, 0x02,
    /* 829*647*617*569*521  /  double-base chain  /  367 M (=38DBL+5TPL+5ADD+1M) */
    0x11, 0x41, 0x01, 0x51, 0x04, 0xd1, 0x01, 0x11, 0x41, 0x0f, 0xe1, 0x04, 0x01,
    /* 967*619*353*293  /  double-base chain  /  285 M (=20DBL+10TPL+3ADD+1M) */
    0x11, 0x51, 0x0d, 0xc1, 0x07, 0x02, 0xe1, 0x03, 0x05,
    /* 757*719*701  /  double-base chain  /  230 M (=19DBL+6TPL+3ADD+1M) */
    0x11, 0xd1, 0x02, 0x06, 0xd1, 0x02, 0x0c, 0xe1, 0x02, 0x01,
    /* 937*859*839*193  /  double-base chain  /  304 M (=29DBL+5TPL+5ADD+1M) */
    0x11, 0x51, 0x0a, 0xc1, 0x02, 0x08, 0xc1, 0x01, 0x02, 0xc1, 0x02, 0x07, 0x61, 0x02,
    /* 947*659*491*359  /  double-base chain  /  305 M (=24DBL+8TPL+5ADD+1M) */
    0x11, 0xd1, 0x01, 0x09, 0x41, 0x06, 0xd1, 0x01, 0x03, 0xd1, 0x05, 0x04, 0xe1, 0x01, 0x02,
    /* 929*509*463*439*389  /  double-base chain  /  380 M (=45DBL+0TPL+8ADD+1M) */
    0x11, 0x41, 0x04, 0x41, 0x09, 0x51, 0x0b, 0x51, 0x03, 0x51, 0x03, 0x41, 0x08, 0x41, 0x04, 0x61, 0x03,
    /* 853*547  /  double-base chain  /  160 M (=9DBL+6TPL+3ADD+1M) */
    0x11, 0x41, 0x02, 0xc1, 0x06, 0x02, 0x71, 0x05,
    /* 563*541*467*419*373*197*137*47*37*29  /  double base expansion  /  557 M (=62DBL+8TPL+3ADD+3M) */
    0x21, 0xa2, 0x08, 0xff, 0x12, 0x51, 0x1a, 0x52, 0x04, 0x62, 0x20,
    /* 607*599*523*461*379*277*79  /  double base expansion  /  448 M (=53DBL+4TPL+3ADD+5M) */
    0x21, 0xa2, 0x02, 0xa3, 0x02, 0xff, 0x13, 0x52, 0x05, 0x41, 0x20, 0x73, 0x10,
    /* 887*761*683*631*433*181  /  double base expansion  /  411 M (=48DBL+4TPL+3ADD+3M) */
    0x21, 0xa2, 0x04, 0xff, 0x12, 0x51, 0x26, 0x42, 0x01, 0x72, 0x09,
    /* 911*883*773*587*61  /  double base expansion  /  341 M (=38DBL+4TPL+3ADD+3M) */
    0x21, 0xa2, 0x04, 0xff, 0x12, 0x42, 0x12, 0x51, 0x08, 0x72, 0x0c,
    /* 601*577*499*347*281  /  double base expansion  /  339 M (=36DBL+5TPL+3ADD+3M) */
    0x21, 0xa2, 0x04, 0x80, 0x01, 0xff, 0x10, 0x42, 0x05, 0x41, 0x0d, 0x62, 0x12,
    /* 809*661*409*331*173  /  double base expansion  /  339 M (=34DBL+6TPL+3ADD+5M) */
    0x21, 0xa2, 0x02, 0xa3, 0x01, 0x80, 0x03, 0xff, 0x10, 0x42, 0x14, 0x41, 0x08, 0x63, 0x06,
    /* 811*449*311  /  double base expansion  /  209 M (=22DBL+3TPL+2ADD+3M) */
    0x21, 0xa2, 0x01, 0x80, 0x02, 0xff, 0x10, 0x41, 0x0c, 0x72, 0x0a,
    /* Here we saved 4M on the last operation */
    0x81,
      /* 5*5*5*5*3*3*3  /  PRAC  /  101 M (=7DBL+0TPL+11ADD+0M) */
      0x69, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66, 0x69, 0x03, 0x66,
      /* 7*3*3*3  /  PRAC  /  55 M (=5DBL+0TPL+5ADD+0M) */
      0x69, 0x66, 0x69, 0x02, 0x66, 0x69, 0x66, 0x69, 0x46,
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=990 */

/* B1=1021 computed with 35 blocks, cost=11343M */
static const uint8_t _B1_1021_bc[] = {
    0x02,
    /* 673*257*241*127*113*109*97*73*43*37*29*19*17*13*13*7*7*5*5*5*3*3*3*3*3*3  /  double-base chain  /  841 M (=112DBL+0TPL+7ADD+1M) */
    0x11, 0x51, 0x1c, 0x51, 0x08, 0x51, 0x0c, 0x41, 0x10, 0x41, 0x0c, 0x41, 0x08, 0x71, 0x1c,
    /* 307*53*29*5  /  double-base chain  /  159 M (=18DBL+2TPL+1ADD+1M) */
    0x11, 0xf1, 0x02, 0x12,
    /* 919*733*467*383*131*107  /  double-base chain  /  380 M (=49DBL+1TPL+3ADD+1M) */
    0x11, 0x51, 0x13, 0xd1, 0x01, 0x18, 0x71, 0x06,
    /* 509*379*223*197*163*71*61*59*7  /  double-base chain  /  459 M (=50DBL+7TPL+3ADD+1M) */
    0x11, 0xc1, 0x02, 0x05, 0xc1, 0x04, 0x12, 0xe1, 0x01, 0x1b,
    /* 773*173*31*31*19*17*11  /  double-base chain  /  291 M (=34DBL+3TPL+2ADD+1M) */
    0x11, 0x51, 0x06, 0xe1, 0x03, 0x1c,
    /* 1009*821*523*331*293*191*151*137  /  double-base chain  /  505 M (=64DBL+2TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x13, 0x51, 0x14, 0x51, 0x05, 0xe1, 0x01, 0x14,
    /* 947*479*461*271*179*83  /  double-base chain  /  373 M (=48DBL+1TPL+3ADD+1M) */
    0x11, 0x51, 0x08, 0x41, 0x02, 0xf1, 0x01, 0x26,
    /* 907*877*727*677*211*23  /  double-base chain  /  383 M (=46DBL+3TPL+3ADD+1M) */
    0x11, 0x51, 0x11, 0xc1, 0x01, 0x18, 0xe1, 0x02, 0x05,
    /* 1021*397*367*337*311*283*281*227*139*11  /  double-base chain  /  596 M (=69DBL+6TPL+5ADD+1M) */
    0x11, 0xc1, 0x02, 0x0f, 0x51, 0x0b, 0xd1, 0x01, 0x17, 0xd1, 0x02, 0x07, 0xe1, 0x01, 0x0d,
    /* 857*829*797  /  double-base chain  /  221 M (=24DBL+3TPL+2ADD+1M) */
    0x11, 0x41, 0x02, 0xe1, 0x03, 0x16,
    /* 941*251*229*67  /  double-base chain  /  242 M (=27DBL+3TPL+2ADD+1M) */
    0x11, 0xd1, 0x01, 0x17, 0xe1, 0x02, 0x04,
    /* 911*653*347*79  /  double-base chain  /  259 M (=26DBL+5TPL+2ADD+1M) */
    0x11, 0xc1, 0x03, 0x0d, 0xf1, 0x02, 0x0d,
    /* 937*859*769*233*157  /  double-base chain  /  339 M (=38DBL+4TPL+3ADD+1M) */
    0x11, 0x41, 0x06, 0xc1, 0x01, 0x02, 0xf1, 0x03, 0x1e,
    /* 751*463*193  /  double-base chain  /  199 M (=26DBL+0TPL+2ADD+1M) */
    0x11, 0x51, 0x12, 0x61, 0x08,
    /* 953*853*641*613*401*89  /  double-base chain  /  410 M (=47DBL+4TPL+4ADD+1M) */
    0x11, 0xc1, 0x02, 0x1f, 0xd1, 0x01, 0x07, 0x51, 0x06, 0xe1, 0x01, 0x03,
    /* 929*757*599*547*239*23  /  double-base chain  /  386 M (=47DBL+2TPL+4ADD+1M) */
    0x11, 0x51, 0x13, 0x41, 0x09, 0xc1, 0x01, 0x01, 0xe1, 0x01, 0x12,
    /* 977*863*503*439  /  double-base chain  /  289 M (=20DBL+11TPL+2ADD+1M) */
    0x11, 0xc1, 0x03, 0x04, 0xf1, 0x08, 0x10,
    /* 991*691*499*409*349*277  /  double-base chain  /  417 M (=52DBL+1TPL+5ADD+1M) */
    0x11, 0xd1, 0x01, 0x13, 0x51, 0x07, 0x41, 0x02, 0x41, 0x08, 0x71, 0x10,
    /* 739*647*587*491*101  /  double-base chain  /  340 M (=37DBL+4TPL+4ADD+1M) */
    0x11, 0x41, 0x02, 0x41, 0x0a, 0xd1, 0x03, 0x0f, 0xe1, 0x01, 0x0a,
    /* 1013*811*661*577*521*419  /  double-base chain  /  437 M (=48DBL+5TPL+5ADD+1M) */
    0x11, 0x41, 0x0f, 0x51, 0x0f, 0xc1, 0x03, 0x07, 0xc1, 0x02, 0x01, 0x61, 0x0a,
    /* 487*443*149  /  double-base chain  /  196 M (=17DBL+5TPL+2ADD+1M) */
    0x11, 0xc1, 0x03, 0x02, 0xe1, 0x02, 0x0f,
    /* 701*557*421*389*47  /  double-base chain  /  326 M (=35DBL+4TPL+4ADD+1M) */
    0x11, 0xc1, 0x01, 0x02, 0xd1, 0x01, 0x03, 0xd1, 0x02, 0x14, 0x71, 0x0a,
    /* 971*541  /  double-base chain  /  150 M (=19DBL+0TPL+2ADD+1M) */
    0x11, 0x41, 0x09, 0x71, 0x0a,
    /* 997*823*809*607*373  /  double-base chain  /  372 M (=37DBL+6TPL+5ADD+1M) */
    0x11, 0x41, 0x01, 0xc1, 0x06, 0x04, 0x41, 0x15, 0x51, 0x08, 0x61, 0x03,
    /* 569*41  /  double-base chain  /  116 M (=5DBL+6TPL+1ADD+1M) */
    0x11, 0xe1, 0x06, 0x05,
    /* 1019*709*431*313  /  double-base chain  /  294 M (=27DBL+6TPL+4ADD+1M) */
    0x11, 0x51, 0x08, 0xc1, 0x01, 0x07, 0x51, 0x07, 0xe1, 0x05, 0x05,
    /* 571*263*199  /  double-base chain  /  201 M (=20DBL+3TPL+3ADD+1M) */
    0x11, 0xc1, 0x02, 0x01, 0x41, 0x11, 0xf1, 0x01, 0x02,
    /* 839*743  /  double-base chain  /  162 M (=11DBL+5TPL+3ADD+1M) */
    0x11, 0x41, 0x02, 0xc1, 0x01, 0x05, 0xe1, 0x04, 0x04,
    /* 887*761*683*631*433*181  /  double base expansion  /  411 M (=48DBL+4TPL+3ADD+3M) */
    0x21, 0xa2, 0x04, 0xff, 0x12, 0x51, 0x26, 0x42, 0x01, 0x72, 0x09,
    /* 827*787*719*643*619*563*317  /  double base expansion  /  492 M (=49DBL+10TPL+3ADD+5M) */
    0x21, 0xa2, 0x07, 0xa3, 0x03, 0xff, 0x13, 0x41, 0x0b, 0x52, 0x01, 0x63, 0x25,
    /* 659*449*359*353*167  /  double base expansion  /  330 M (=33DBL+6TPL+3ADD+3M) */
    0x21, 0xa2, 0x01, 0x80, 0x05, 0xff, 0x10, 0x51, 0x11, 0x42, 0x09, 0x62, 0x07,
    /* 883*601*457*269  /  double base expansion  /  285 M (=28DBL+5TPL+3ADD+5M) */
    0x21, 0xa2, 0x02, 0xa3, 0x03, 0xff, 0x13, 0x41, 0x05, 0x43, 0x0d, 0x72, 0x0a,
    /* 983*881*617*103  /  double base expansion  /  286 M (=23DBL+8TPL+3ADD+5M) */
    0x21, 0xa2, 0x02, 0xa3, 0x04, 0x80, 0x02, 0xff, 0x10, 0x51, 0x03, 0x42, 0x09, 0x63, 0x0b,
    /* 967*593  /  double base expansion  /  155 M (=16DBL+2TPL+2ADD+3M) */
    0x21, 0xa2, 0x02, 0xff, 0x12, 0x51, 0x02, 0x72, 0x0e,
    /* Here we saved 4M on the last operation */
      /* 2*2*2*2*2*2*2*2*2  /  PRAC  /  45 M (=9DBL+0TPL+0ADD+0M) */
      /* done outside of bytecode (for backtracking) */
    0xff
  }; /* end of bytecode for B1=1021 */


#define mishmash_B1_data_len (sizeof(mishmash_B1_data)/sizeof(mishmash_B1_data_t))

/* Sorted by increasing B1 */
static mishmash_B1_data_t mishmash_B1_data[] = {
    { .B1 = 1, .len = sizeof(_B1_1_bc)/sizeof(*_B1_1_bc), .bc = _B1_1_bc },
    { .B1 = 105, .len = sizeof(_B1_105_bc)/sizeof(*_B1_105_bc), .bc = _B1_105_bc },
    { .B1 = 115, .len = sizeof(_B1_115_bc)/sizeof(*_B1_115_bc), .bc = _B1_115_bc },
    { .B1 = 125, .len = sizeof(_B1_125_bc)/sizeof(*_B1_125_bc), .bc = _B1_125_bc },
    { .B1 = 137, .len = sizeof(_B1_137_bc)/sizeof(*_B1_137_bc), .bc = _B1_137_bc },
    { .B1 = 148, .len = sizeof(_B1_148_bc)/sizeof(*_B1_148_bc), .bc = _B1_148_bc },
    { .B1 = 161, .len = sizeof(_B1_161_bc)/sizeof(*_B1_161_bc), .bc = _B1_161_bc },
    { .B1 = 173, .len = sizeof(_B1_173_bc)/sizeof(*_B1_173_bc), .bc = _B1_173_bc },
    { .B1 = 187, .len = sizeof(_B1_187_bc)/sizeof(*_B1_187_bc), .bc = _B1_187_bc },
    { .B1 = 200, .len = sizeof(_B1_200_bc)/sizeof(*_B1_200_bc), .bc = _B1_200_bc },
    { .B1 = 214, .len = sizeof(_B1_214_bc)/sizeof(*_B1_214_bc), .bc = _B1_214_bc },
    { .B1 = 229, .len = sizeof(_B1_229_bc)/sizeof(*_B1_229_bc), .bc = _B1_229_bc },
    { .B1 = 244, .len = sizeof(_B1_244_bc)/sizeof(*_B1_244_bc), .bc = _B1_244_bc },
    { .B1 = 260, .len = sizeof(_B1_260_bc)/sizeof(*_B1_260_bc), .bc = _B1_260_bc },
    { .B1 = 276, .len = sizeof(_B1_276_bc)/sizeof(*_B1_276_bc), .bc = _B1_276_bc },
    { .B1 = 293, .len = sizeof(_B1_293_bc)/sizeof(*_B1_293_bc), .bc = _B1_293_bc },
    { .B1 = 310, .len = sizeof(_B1_310_bc)/sizeof(*_B1_310_bc), .bc = _B1_310_bc },
    { .B1 = 327, .len = sizeof(_B1_327_bc)/sizeof(*_B1_327_bc), .bc = _B1_327_bc },
    { .B1 = 345, .len = sizeof(_B1_345_bc)/sizeof(*_B1_345_bc), .bc = _B1_345_bc },
    { .B1 = 364, .len = sizeof(_B1_364_bc)/sizeof(*_B1_364_bc), .bc = _B1_364_bc },
    { .B1 = 383, .len = sizeof(_B1_383_bc)/sizeof(*_B1_383_bc), .bc = _B1_383_bc },
    { .B1 = 403, .len = sizeof(_B1_403_bc)/sizeof(*_B1_403_bc), .bc = _B1_403_bc },
    { .B1 = 423, .len = sizeof(_B1_423_bc)/sizeof(*_B1_423_bc), .bc = _B1_423_bc },
    { .B1 = 443, .len = sizeof(_B1_443_bc)/sizeof(*_B1_443_bc), .bc = _B1_443_bc },
    { .B1 = 464, .len = sizeof(_B1_464_bc)/sizeof(*_B1_464_bc), .bc = _B1_464_bc },
    { .B1 = 486, .len = sizeof(_B1_486_bc)/sizeof(*_B1_486_bc), .bc = _B1_486_bc },
    { .B1 = 508, .len = sizeof(_B1_508_bc)/sizeof(*_B1_508_bc), .bc = _B1_508_bc },
    { .B1 = 531, .len = sizeof(_B1_531_bc)/sizeof(*_B1_531_bc), .bc = _B1_531_bc },
    { .B1 = 554, .len = sizeof(_B1_554_bc)/sizeof(*_B1_554_bc), .bc = _B1_554_bc },
    { .B1 = 577, .len = sizeof(_B1_577_bc)/sizeof(*_B1_577_bc), .bc = _B1_577_bc },
    { .B1 = 601, .len = sizeof(_B1_601_bc)/sizeof(*_B1_601_bc), .bc = _B1_601_bc },
    { .B1 = 626, .len = sizeof(_B1_626_bc)/sizeof(*_B1_626_bc), .bc = _B1_626_bc },
    { .B1 = 651, .len = sizeof(_B1_651_bc)/sizeof(*_B1_651_bc), .bc = _B1_651_bc },
    { .B1 = 676, .len = sizeof(_B1_676_bc)/sizeof(*_B1_676_bc), .bc = _B1_676_bc },
    { .B1 = 702, .len = sizeof(_B1_702_bc)/sizeof(*_B1_702_bc), .bc = _B1_702_bc },
    { .B1 = 729, .len = sizeof(_B1_729_bc)/sizeof(*_B1_729_bc), .bc = _B1_729_bc },
    { .B1 = 756, .len = sizeof(_B1_756_bc)/sizeof(*_B1_756_bc), .bc = _B1_756_bc },
    { .B1 = 783, .len = sizeof(_B1_783_bc)/sizeof(*_B1_783_bc), .bc = _B1_783_bc },
    { .B1 = 811, .len = sizeof(_B1_811_bc)/sizeof(*_B1_811_bc), .bc = _B1_811_bc },
    { .B1 = 840, .len = sizeof(_B1_840_bc)/sizeof(*_B1_840_bc), .bc = _B1_840_bc },
    { .B1 = 869, .len = sizeof(_B1_869_bc)/sizeof(*_B1_869_bc), .bc = _B1_869_bc },
    { .B1 = 898, .len = sizeof(_B1_898_bc)/sizeof(*_B1_898_bc), .bc = _B1_898_bc },
    { .B1 = 928, .len = sizeof(_B1_928_bc)/sizeof(*_B1_928_bc), .bc = _B1_928_bc },
    { .B1 = 959, .len = sizeof(_B1_959_bc)/sizeof(*_B1_959_bc), .bc = _B1_959_bc },
    { .B1 = 990, .len = sizeof(_B1_990_bc)/sizeof(*_B1_990_bc), .bc = _B1_990_bc },
    { .B1 = 1021, .len = sizeof(_B1_1021_bc)/sizeof(*_B1_1021_bc), .bc = _B1_1021_bc },
  }; /* end of B1_data array */

#endif /* BYTECODE_MISHMASH_B1_DATA_H */

