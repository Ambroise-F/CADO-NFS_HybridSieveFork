# We need to know what exact type uint64_t is typedef'd to. The reason is
# that some templates would otherwise resolve ambiguously if we define
# both.

include(CheckCXXSourceCompiles)

macro(testcode_type_eq type1 type2)
    set(test_code "
#include <type_traits>
#include <stdint.h>
#include <stdio.h>
#include <gmp.h>
int main()
{
    static_assert(std::is_same<${type1}, ${type2}>::value ||
        sizeof(${type1}) == sizeof(${type2})
        && std::is_signed<${type1}>::value == std::is_signed<${type2}>::value
        , \"not this type\");
    return 0;
}
"
)
endmacro()

set(CMAKE_REQUIRED_FLAGS)
set(CMAKE_REQUIRED_DEFINITIONS)
set(CMAKE_REQUIRED_INCLUDES)
set(CMAKE_REQUIRED_LIBRARIES ${gmp_libname})

testcode_type_eq("uint64_t" "unsigned long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" UINT64_T_IS_UNSIGNED_LONG)
testcode_type_eq("uint64_t" "unsigned long long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" UINT64_T_IS_UNSIGNED_LONG_LONG)
if (UINT64_T_IS_UNSIGNED_LONG)
    message(STATUS "uint64_t == unsigned long")
    set(CADO_MPI_UINT64_T MPI_UNSIGNED_LONG)
elseif (SIZE_T_IS_UNSIGNED_LONG_LONG)
    message(STATUS "uint64_t == unsigned long long")
    set(CADO_MPI_UINT64_T MPI_UNSIGNED_LONG_LONG)
else()
    message(FATAL_ERROR "uint64_t should be either unsigned long or unsigned long long")
endif()


testcode_type_eq("uint32_t" "unsigned long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" UINT32_T_IS_UNSIGNED_LONG)
testcode_type_eq("uint32_t" "unsigned int")
CHECK_CXX_SOURCE_COMPILES("${test_code}" UINT32_T_IS_UNSIGNED_INT)
if (UINT32_T_IS_UNSIGNED_LONG)
    message(STATUS "uint32_t == unsigned long")
    set(CADO_MPI_UINT32_T MPI_UNSIGNED_LONG)
elseif (UINT32_T_IS_UNSIGNED_INT)
    message(STATUS "uint32_t == unsigned int")
    set(CADO_MPI_UINT32_T MPI_UNSIGNED)
else()
    message(FATAL_ERROR "uint32_t should be either unsigned long or unsigned int")
endif()

testcode_type_eq("int64_t" "long long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" INT64_T_IS_LONG_LONG)
testcode_type_eq("int64_t" "long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" INT64_T_IS_LONG)
if (INT64_T_IS_LONG)
    message(STATUS "int64_t == long")
    set(CADO_MPI_INT64_T MPI_LONG)
elseif (SIZE_T_IS_LONG_LONG)
    message(STATUS "int64_t == long long")
    set(CADO_MPI_INT64_T MPI_LONG_LONG)
else()
    message(FATAL_ERROR "int64_t should be either long or long long")
endif()


testcode_type_eq("int32_t" "long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" INT32_T_IS_LONG)
testcode_type_eq("int32_t" "int")
CHECK_CXX_SOURCE_COMPILES("${test_code}" INT32_T_IS_INT)
if (INT32_T_IS_LONG)
    message(STATUS "int32_t == long")
    set(CADO_MPI_INT32_T MPI_LONG)
elseif (INT32_T_IS_INT)
    message(STATUS "int32_t == int")
    set(CADO_MPI_INT32_T MPI_INT)
else()
    message(FATAL_ERROR "int32_t should be either long or int")
endif()


testcode_type_eq("size_t" "unsigned long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" SIZE_T_IS_UNSIGNED_LONG)
testcode_type_eq("size_t" "unsigned long long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" SIZE_T_IS_UNSIGNED_LONG_LONG)
if (SIZE_T_IS_UNSIGNED_LONG)
    message(STATUS "size_t == unsigned long")
    set(CADO_MPI_SIZE_T MPI_UNSIGNED_LONG)
elseif (SIZE_T_IS_UNSIGNED_LONG_LONG)
    message(STATUS "size_t == unsigned long long")
    set(CADO_MPI_SIZE_T MPI_UNSIGNED_LONG_LONG)
else()
    message(FATAL_ERROR "size_t should be either unsigned long or unsigned long long")
endif()

testcode_type_eq("ssize_t" "long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" SSIZE_T_IS_LONG)
testcode_type_eq("ssize_t" "long long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" SSIZE_T_IS_LONG_LONG)
if (SSIZE_T_IS_LONG)
    message(STATUS "ssize_t == long")
    set(CADO_MPI_SSIZE_T MPI_LONG)
elseif (SSIZE_T_IS_LONG_LONG)
    message(STATUS "ssize_t == long long")
    set(CADO_MPI_SSIZE_T MPI_LONG_LONG)
else()
    message(FATAL_ERROR "ssize_t should be either long or long long")
endif()

testcode_type_eq("mp_limb_t" "unsigned long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" MP_LIMB_T_IS_UNSIGNED_LONG)
testcode_type_eq("mp_limb_t" "unsigned long long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" MP_LIMB_T_IS_UNSIGNED_LONG_LONG)
if (MP_LIMB_T_IS_UNSIGNED_LONG)
    message(STATUS "mp_limb_t == unsigned long")
    set(CADO_MPI_MP_LIMB_T MPI_UNSIGNED_LONG)
elseif (MP_LIMB_T_IS_UNSIGNED_LONG_LONG)
    message(STATUS "mp_limb_t == unsigned long long")
    set(CADO_MPI_MP_LIMB_T MPI_UNSIGNED_LONG_LONG)
else()
    message(FATAL_ERROR "mp_limb_t should be either unsigned long or unsigned long long")
endif()


testcode_type_eq("mp_size_t" "long long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" MP_SIZE_T_IS_LONG_LONG)
testcode_type_eq("mp_size_t" "long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" MP_SIZE_T_IS_LONG)
testcode_type_eq("mp_size_t" "int")
CHECK_CXX_SOURCE_COMPILES("${test_code}" MP_SIZE_T_IS_INT)
if (MP_SIZE_T_IS_LONG)
    message(STATUS "mp_size_t == long")
    set(CADO_MPI_MP_SIZE_T MPI_LONG)
elseif (MP_SIZE_T_IS_LONG_LONG)
    message(STATUS "mp_size_t == long long")
    set(CADO_MPI_MP_SIZE_T MPI_LONG_LONG)
elseif (MP_SIZE_T_IS_INT)
    message(STATUS "mp_size_t == int")
    set(CADO_MPI_MP_SIZE_T MPI_INT)
else()
    message(FATAL_ERROR "mp_size_t should be either long or int")
endif()

testcode_type_eq("decltype(__mpz_struct::_mp_size)" "long long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" MPZ_INTERNAL_SIZE_T_IS_LONG_LONG)
testcode_type_eq("decltype(__mpz_struct::_mp_size)" "long")
CHECK_CXX_SOURCE_COMPILES("${test_code}" MPZ_INTERNAL_SIZE_T_IS_LONG)
testcode_type_eq("decltype(__mpz_struct::_mp_size)" "int")
CHECK_CXX_SOURCE_COMPILES("${test_code}" MPZ_INTERNAL_SIZE_T_IS_INT)
if (MP_SIZE_T_IS_LONG)
    message(STATUS "decltype(__mpz_struct::_mp_size) == long")
    set(CADO_MPI_MPZ_INTERNAL_SIZE_T MPI_LONG)
elseif (MP_SIZE_T_IS_LONG_LONG)
    message(STATUS "decltype(__mpz_struct::_mp_size) == long long")
    set(CADO_MPI_MPZ_INTERNAL_SIZE_T MPI_LONG_LONG)
elseif (MP_SIZE_T_IS_INT)
    message(STATUS "decltype(__mpz_struct::_mp_size) == int")
    set(CADO_MPI_MPZ_INTERNAL_SIZE_T MPI_INT)
else()
    message(FATAL_ERROR "decltype(__mpz_struct::_mp_size) should be either long or int")
endif()

